<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>nn.Module:_Int8OPTDecoder (5,981,883 us., 25.37%)</title><rect x="890.6" y="165" width="299.4" height="15.0" fill="rgb(240,93,54)" rx="2" ry="2" />
<text  x="893.55" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_LayerNorm (9,501 us., 0.04%)</title><rect x="727.0" y="213" width="0.5" height="15.0" fill="rgb(225,133,46)" rx="2" ry="2" />
<text  x="730.02" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (22,389 us., 0.09%)</title><rect x="307.0" y="165" width="1.1" height="15.0" fill="rgb(248,68,52)" rx="2" ry="2" />
<text  x="310.02" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7fe7af6a29c0&gt; (3,046 us., 0.01%)</title><rect x="889.6" y="261" width="0.1" height="15.0" fill="rgb(242,97,50)" rx="2" ry="2" />
<text  x="892.57" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (248,144 us., 1.05%)</title><rect x="739.6" y="149" width="12.4" height="15.0" fill="rgb(239,81,5)" rx="2" ry="2" />
<text  x="742.60" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fe6bb198450&gt; (10,369,522 us., 43.99%)</title><rect x="208.0" y="261" width="519.0" height="15.0" fill="rgb(238,20,17)" rx="2" ry="2" />
<text  x="210.98" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fe6bb198450&gt;</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (353,356 us., 1.50%)</title><rect x="752.0" y="101" width="17.7" height="15.0" fill="rgb(214,166,36)" rx="2" ry="2" />
<text  x="755.02" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (633,508 us., 2.69%)</title><rect x="308.1" y="213" width="31.8" height="15.0" fill="rgb(218,20,43)" rx="2" ry="2" />
<text  x="311.14" y="223.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (10,489 us., 0.04%)</title><rect x="207.5" y="181" width="0.5" height="15.0" fill="rgb(229,58,47)" rx="2" ry="2" />
<text  x="210.46" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,732,404 us., 32.80%)</title><rect x="339.9" y="149" width="387.0" height="15.0" fill="rgb(252,76,48)" rx="2" ry="2" />
<text  x="342.85" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (2,174 us., 0.01%)</title><rect x="726.9" y="245" width="0.1" height="15.0" fill="rgb(246,197,45)" rx="2" ry="2" />
<text  x="729.91" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,970,279 us., 8.36%)</title><rect x="790.9" y="117" width="98.6" height="15.0" fill="rgb(239,156,27)" rx="2" ry="2" />
<text  x="793.93" y="127.5" >nn.Module:_..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,981,883 us., 25.37%)</title><rect x="890.6" y="149" width="299.4" height="15.0" fill="rgb(250,63,27)" rx="2" ry="2" />
<text  x="893.55" y="159.5" >transformers/models/opt/modeling_opt.py(..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (633,508 us., 2.69%)</title><rect x="308.1" y="101" width="31.8" height="15.0" fill="rgb(222,22,4)" rx="2" ry="2" />
<text  x="311.14" y="111.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,981,883 us., 25.37%)</title><rect x="890.6" y="101" width="299.4" height="15.0" fill="rgb(251,203,27)" rx="2" ry="2" />
<text  x="893.55" y="111.5" >torch/autograd/grad_mode.py(27):_decorat..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (633,508 us., 2.69%)</title><rect x="308.1" y="117" width="31.8" height="15.0" fill="rgb(213,195,44)" rx="2" ry="2" />
<text  x="311.14" y="127.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,216,212 us., 13.64%)</title><rect x="45.9" y="133" width="161.0" height="15.0" fill="rgb(251,207,21)" rx="2" ry="2" />
<text  x="48.94" y="143.5" >transformers/models/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (633,508 us., 2.69%)</title><rect x="308.1" y="245" width="31.8" height="15.0" fill="rgb(252,55,8)" rx="2" ry="2" />
<text  x="311.14" y="255.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,174 us., 0.01%)</title><rect x="726.9" y="165" width="0.1" height="15.0" fill="rgb(206,57,10)" rx="2" ry="2" />
<text  x="729.91" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (704,059 us., 2.99%)</title><rect x="10.0" y="229" width="35.2" height="15.0" fill="rgb(248,56,39)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,046 us., 0.01%)</title><rect x="889.6" y="229" width="0.1" height="15.0" fill="rgb(206,99,22)" rx="2" ry="2" />
<text  x="892.57" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,174 us., 0.01%)</title><rect x="726.9" y="197" width="0.1" height="15.0" fill="rgb(226,17,4)" rx="2" ry="2" />
<text  x="729.91" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (15,897 us., 0.07%)</title><rect x="889.8" y="213" width="0.8" height="15.0" fill="rgb(211,90,1)" rx="2" ry="2" />
<text  x="892.76" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (7,732,404 us., 32.80%)</title><rect x="339.9" y="245" width="387.0" height="15.0" fill="rgb(248,159,3)" rx="2" ry="2" />
<text  x="342.85" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (633,508 us., 2.69%)</title><rect x="308.1" y="229" width="31.8" height="15.0" fill="rgb(247,31,47)" rx="2" ry="2" />
<text  x="311.14" y="239.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,970,279 us., 8.36%)</title><rect x="790.9" y="149" width="98.6" height="15.0" fill="rgb(223,172,5)" rx="2" ry="2" />
<text  x="793.93" y="159.5" >nn.Module:_..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (12,204 us., 0.05%)</title><rect x="45.2" y="245" width="0.7" height="15.0" fill="rgb(217,60,2)" rx="2" ry="2" />
<text  x="48.24" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (633,508 us., 2.69%)</title><rect x="308.1" y="133" width="31.8" height="15.0" fill="rgb(214,122,29)" rx="2" ry="2" />
<text  x="311.14" y="143.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (22,389 us., 0.09%)</title><rect x="307.0" y="245" width="1.1" height="15.0" fill="rgb(251,85,41)" rx="2" ry="2" />
<text  x="310.02" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (248,144 us., 1.05%)</title><rect x="739.6" y="101" width="12.4" height="15.0" fill="rgb(206,219,30)" rx="2" ry="2" />
<text  x="742.60" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (423,991 us., 1.80%)</title><rect x="769.7" y="197" width="21.2" height="15.0" fill="rgb(250,163,27)" rx="2" ry="2" />
<text  x="772.70" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (353,356 us., 1.50%)</title><rect x="752.0" y="37" width="17.7" height="15.0" fill="rgb(236,191,26)" rx="2" ry="2" />
<text  x="755.02" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,208 us., 0.03%)</title><rect x="306.6" y="181" width="0.4" height="15.0" fill="rgb(245,40,14)" rx="2" ry="2" />
<text  x="309.61" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (353,356 us., 1.50%)</title><rect x="752.0" y="165" width="17.7" height="15.0" fill="rgb(242,113,16)" rx="2" ry="2" />
<text  x="755.02" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,216,212 us., 13.64%)</title><rect x="45.9" y="165" width="161.0" height="15.0" fill="rgb(213,167,49)" rx="2" ry="2" />
<text  x="48.94" y="175.5" >torch_int/nn/opt.py(..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,208 us., 0.03%)</title><rect x="306.6" y="149" width="0.4" height="15.0" fill="rgb(229,63,16)" rx="2" ry="2" />
<text  x="309.61" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,501 us., 0.04%)</title><rect x="727.0" y="117" width="0.5" height="15.0" fill="rgb(240,170,27)" rx="2" ry="2" />
<text  x="730.02" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,174 us., 0.01%)</title><rect x="726.9" y="181" width="0.1" height="15.0" fill="rgb(245,67,23)" rx="2" ry="2" />
<text  x="729.91" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (241,853 us., 1.03%)</title><rect x="727.5" y="133" width="12.1" height="15.0" fill="rgb(225,105,12)" rx="2" ry="2" />
<text  x="730.49" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,970,279 us., 8.36%)</title><rect x="790.9" y="245" width="98.6" height="15.0" fill="rgb(219,174,46)" rx="2" ry="2" />
<text  x="793.93" y="255.5" >torch_int/n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (704,059 us., 2.99%)</title><rect x="10.0" y="213" width="35.2" height="15.0" fill="rgb(206,222,35)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >tr..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (15,897 us., 0.07%)</title><rect x="889.8" y="261" width="0.8" height="15.0" fill="rgb(242,112,22)" rx="2" ry="2" />
<text  x="892.76" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,970,279 us., 8.36%)</title><rect x="790.9" y="133" width="98.6" height="15.0" fill="rgb(238,17,54)" rx="2" ry="2" />
<text  x="793.93" y="143.5" >transformer..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (7,732,404 us., 32.80%)</title><rect x="339.9" y="197" width="387.0" height="15.0" fill="rgb(248,50,29)" rx="2" ry="2" />
<text  x="342.85" y="207.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (9,501 us., 0.04%)</title><rect x="727.0" y="245" width="0.5" height="15.0" fill="rgb(239,35,47)" rx="2" ry="2" />
<text  x="730.02" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (423,991 us., 1.80%)</title><rect x="769.7" y="213" width="21.2" height="15.0" fill="rgb(240,146,53)" rx="2" ry="2" />
<text  x="772.70" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (5,981,883 us., 25.37%)</title><rect x="890.6" y="181" width="299.4" height="15.0" fill="rgb(218,142,36)" rx="2" ry="2" />
<text  x="893.55" y="191.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (423,991 us., 1.80%)</title><rect x="769.7" y="181" width="21.2" height="15.0" fill="rgb(223,156,2)" rx="2" ry="2" />
<text  x="772.70" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (423,991 us., 1.80%)</title><rect x="769.7" y="133" width="21.2" height="15.0" fill="rgb(248,36,43)" rx="2" ry="2" />
<text  x="772.70" y="143.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (9,501 us., 0.04%)</title><rect x="727.0" y="229" width="0.5" height="15.0" fill="rgb(251,191,54)" rx="2" ry="2" />
<text  x="730.02" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (704,059 us., 2.99%)</title><rect x="10.0" y="261" width="35.2" height="15.0" fill="rgb(225,142,54)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;b..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (21,178 us., 0.09%)</title><rect x="206.9" y="229" width="1.1" height="15.0" fill="rgb(239,181,42)" rx="2" ry="2" />
<text  x="209.92" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,970,531 us., 8.36%)</title><rect x="208.0" y="85" width="98.6" height="15.0" fill="rgb(220,86,18)" rx="2" ry="2" />
<text  x="210.98" y="95.5" >profiling/u..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,970,531 us., 8.36%)</title><rect x="208.0" y="69" width="98.6" height="15.0" fill="rgb(227,93,33)" rx="2" ry="2" />
<text  x="210.98" y="79.5" >torch/autog..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (3,216,212 us., 13.64%)</title><rect x="45.9" y="197" width="161.0" height="15.0" fill="rgb(236,84,46)" rx="2" ry="2" />
<text  x="48.94" y="207.5" >torch_int/nn/opt.py(..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,174 us., 0.01%)</title><rect x="726.9" y="149" width="0.1" height="15.0" fill="rgb(254,196,0)" rx="2" ry="2" />
<text  x="729.91" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,732,404 us., 32.80%)</title><rect x="339.9" y="117" width="387.0" height="15.0" fill="rgb(222,87,8)" rx="2" ry="2" />
<text  x="342.85" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_with_scaling_of_PyCapsule_object_at_0x7fe6bab35ed0&gt; (489,997 us., 2.08%)</title><rect x="727.5" y="261" width="24.5" height="15.0" fill="rgb(252,157,24)" rx="2" ry="2" />
<text  x="730.49" y="271.5" >&lt;..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fe6bab35f00&gt; (353,356 us., 1.50%)</title><rect x="752.0" y="261" width="17.7" height="15.0" fill="rgb(214,194,1)" rx="2" ry="2" />
<text  x="755.02" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (12,204 us., 0.05%)</title><rect x="45.2" y="229" width="0.7" height="15.0" fill="rgb(247,92,47)" rx="2" ry="2" />
<text  x="48.24" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (8,208 us., 0.03%)</title><rect x="306.6" y="229" width="0.4" height="15.0" fill="rgb(207,71,7)" rx="2" ry="2" />
<text  x="309.61" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,970,279 us., 8.36%)</title><rect x="790.9" y="181" width="98.6" height="15.0" fill="rgb(234,11,48)" rx="2" ry="2" />
<text  x="793.93" y="191.5" >nn.Module:_..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (248,144 us., 1.05%)</title><rect x="739.6" y="37" width="12.4" height="15.0" fill="rgb(228,45,39)" rx="2" ry="2" />
<text  x="742.60" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (3,216,212 us., 13.64%)</title><rect x="45.9" y="229" width="161.0" height="15.0" fill="rgb(242,175,11)" rx="2" ry="2" />
<text  x="48.94" y="239.5" >torch_int/nn/fused.p..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (633,508 us., 2.69%)</title><rect x="308.1" y="149" width="31.8" height="15.0" fill="rgb(226,65,15)" rx="2" ry="2" />
<text  x="311.14" y="159.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (248,144 us., 1.05%)</title><rect x="739.6" y="133" width="12.4" height="15.0" fill="rgb(234,73,21)" rx="2" ry="2" />
<text  x="742.60" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (22,389 us., 0.09%)</title><rect x="307.0" y="181" width="1.1" height="15.0" fill="rgb(221,66,3)" rx="2" ry="2" />
<text  x="310.02" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,970,279 us., 8.36%)</title><rect x="790.9" y="229" width="98.6" height="15.0" fill="rgb(226,197,50)" rx="2" ry="2" />
<text  x="793.93" y="239.5" >torch/autog..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,501 us., 0.04%)</title><rect x="727.0" y="165" width="0.5" height="15.0" fill="rgb(207,171,44)" rx="2" ry="2" />
<text  x="730.02" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (633,508 us., 2.69%)</title><rect x="308.1" y="85" width="31.8" height="15.0" fill="rgb(238,171,48)" rx="2" ry="2" />
<text  x="311.14" y="95.5" >pr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (15,897 us., 0.07%)</title><rect x="889.8" y="245" width="0.8" height="15.0" fill="rgb(241,21,32)" rx="2" ry="2" />
<text  x="892.76" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,208 us., 0.03%)</title><rect x="306.6" y="197" width="0.4" height="15.0" fill="rgb(249,152,26)" rx="2" ry="2" />
<text  x="309.61" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (12,204 us., 0.05%)</title><rect x="45.2" y="197" width="0.7" height="15.0" fill="rgb(213,186,50)" rx="2" ry="2" />
<text  x="48.24" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (248,144 us., 1.05%)</title><rect x="739.6" y="117" width="12.4" height="15.0" fill="rgb(245,183,15)" rx="2" ry="2" />
<text  x="742.60" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (704,059 us., 2.99%)</title><rect x="10.0" y="197" width="35.2" height="15.0" fill="rgb(210,104,32)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (5,981,883 us., 25.37%)</title><rect x="890.6" y="261" width="299.4" height="15.0" fill="rgb(228,150,49)" rx="2" ry="2" />
<text  x="893.55" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fe7af6a29c0&gt; (9,501 us., 0.04%)</title><rect x="727.0" y="261" width="0.5" height="15.0" fill="rgb(245,148,32)" rx="2" ry="2" />
<text  x="730.02" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (353,356 us., 1.50%)</title><rect x="752.0" y="117" width="17.7" height="15.0" fill="rgb(246,21,31)" rx="2" ry="2" />
<text  x="755.02" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (7,732,404 us., 32.80%)</title><rect x="339.9" y="229" width="387.0" height="15.0" fill="rgb(215,74,5)" rx="2" ry="2" />
<text  x="342.85" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (241,853 us., 1.03%)</title><rect x="727.5" y="165" width="12.1" height="15.0" fill="rgb(236,182,22)" rx="2" ry="2" />
<text  x="730.49" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (15,897 us., 0.07%)</title><rect x="889.8" y="181" width="0.8" height="15.0" fill="rgb(213,75,49)" rx="2" ry="2" />
<text  x="892.76" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,489 us., 0.04%)</title><rect x="207.5" y="133" width="0.5" height="15.0" fill="rgb(217,22,16)" rx="2" ry="2" />
<text  x="210.46" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,732,404 us., 32.80%)</title><rect x="339.9" y="85" width="387.0" height="15.0" fill="rgb(240,144,11)" rx="2" ry="2" />
<text  x="342.85" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (241,853 us., 1.03%)</title><rect x="727.5" y="117" width="12.1" height="15.0" fill="rgb(242,142,35)" rx="2" ry="2" />
<text  x="730.49" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,046 us., 0.01%)</title><rect x="889.6" y="245" width="0.1" height="15.0" fill="rgb(241,139,24)" rx="2" ry="2" />
<text  x="892.57" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (12,204 us., 0.05%)</title><rect x="45.2" y="181" width="0.7" height="15.0" fill="rgb(220,222,21)" rx="2" ry="2" />
<text  x="48.24" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (5,981,883 us., 25.37%)</title><rect x="890.6" y="197" width="299.4" height="15.0" fill="rgb(253,97,8)" rx="2" ry="2" />
<text  x="893.55" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,046 us., 0.01%)</title><rect x="889.6" y="197" width="0.1" height="15.0" fill="rgb(216,158,28)" rx="2" ry="2" />
<text  x="892.57" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (12,204 us., 0.05%)</title><rect x="45.2" y="165" width="0.7" height="15.0" fill="rgb(212,206,39)" rx="2" ry="2" />
<text  x="48.24" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (5,981,883 us., 25.37%)</title><rect x="890.6" y="245" width="299.4" height="15.0" fill="rgb(206,99,38)" rx="2" ry="2" />
<text  x="893.55" y="255.5" >torch/autograd/grad_mode.py(24):_decorat..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,208 us., 0.03%)</title><rect x="306.6" y="213" width="0.4" height="15.0" fill="rgb(218,32,11)" rx="2" ry="2" />
<text  x="309.61" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,970,531 us., 8.36%)</title><rect x="208.0" y="197" width="98.6" height="15.0" fill="rgb(240,39,48)" rx="2" ry="2" />
<text  x="210.98" y="207.5" >nn.Module:_..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (241,853 us., 1.03%)</title><rect x="727.5" y="149" width="12.1" height="15.0" fill="rgb(210,117,23)" rx="2" ry="2" />
<text  x="730.49" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7fe6bab35f30&gt; (3,216,212 us., 13.64%)</title><rect x="45.9" y="261" width="161.0" height="15.0" fill="rgb(245,215,31)" rx="2" ry="2" />
<text  x="48.94" y="271.5" >&lt;built-in_method_dq_..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (633,508 us., 2.69%)</title><rect x="308.1" y="165" width="31.8" height="15.0" fill="rgb(233,213,38)" rx="2" ry="2" />
<text  x="311.14" y="175.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (353,356 us., 1.50%)</title><rect x="752.0" y="229" width="17.7" height="15.0" fill="rgb(230,125,20)" rx="2" ry="2" />
<text  x="755.02" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,489 us., 0.04%)</title><rect x="207.5" y="101" width="0.5" height="15.0" fill="rgb(253,90,31)" rx="2" ry="2" />
<text  x="210.46" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,970,531 us., 8.36%)</title><rect x="208.0" y="149" width="98.6" height="15.0" fill="rgb(213,15,42)" rx="2" ry="2" />
<text  x="210.98" y="159.5" >torch_int/n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,970,279 us., 8.36%)</title><rect x="790.9" y="85" width="98.6" height="15.0" fill="rgb(215,221,40)" rx="2" ry="2" />
<text  x="793.93" y="95.5" >torch/autog..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,216,212 us., 13.64%)</title><rect x="45.9" y="117" width="161.0" height="15.0" fill="rgb(253,209,32)" rx="2" ry="2" />
<text  x="48.94" y="127.5" >nn.Module:_Int8OPTFo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (22,389 us., 0.09%)</title><rect x="307.0" y="229" width="1.1" height="15.0" fill="rgb(224,131,21)" rx="2" ry="2" />
<text  x="310.02" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (423,991 us., 1.80%)</title><rect x="769.7" y="117" width="21.2" height="15.0" fill="rgb(221,189,41)" rx="2" ry="2" />
<text  x="772.70" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (10,489 us., 0.04%)</title><rect x="207.5" y="197" width="0.5" height="15.0" fill="rgb(208,20,48)" rx="2" ry="2" />
<text  x="210.46" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,970,531 us., 8.36%)</title><rect x="208.0" y="229" width="98.6" height="15.0" fill="rgb(239,117,28)" rx="2" ry="2" />
<text  x="210.98" y="239.5" >torch_int/n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,046 us., 0.01%)</title><rect x="889.6" y="165" width="0.1" height="15.0" fill="rgb(208,61,8)" rx="2" ry="2" />
<text  x="892.57" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,970,531 us., 8.36%)</title><rect x="208.0" y="133" width="98.6" height="15.0" fill="rgb(236,193,18)" rx="2" ry="2" />
<text  x="210.98" y="143.5" >nn.Module:_..</text>
</g>
<g >
<title>torch_int/nn/linear.py(122):_forward (423,991 us., 1.80%)</title><rect x="769.7" y="245" width="21.2" height="15.0" fill="rgb(207,41,5)" rx="2" ry="2" />
<text  x="772.70" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,174 us., 0.01%)</title><rect x="726.9" y="133" width="0.1" height="15.0" fill="rgb(211,179,21)" rx="2" ry="2" />
<text  x="729.91" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (241,853 us., 1.03%)</title><rect x="727.5" y="85" width="12.1" height="15.0" fill="rgb(250,184,40)" rx="2" ry="2" />
<text  x="730.49" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,732,404 us., 32.80%)</title><rect x="339.9" y="101" width="387.0" height="15.0" fill="rgb(244,5,2)" rx="2" ry="2" />
<text  x="342.85" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (8,208 us., 0.03%)</title><rect x="306.6" y="245" width="0.4" height="15.0" fill="rgb(251,206,33)" rx="2" ry="2" />
<text  x="309.61" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (241,853 us., 1.03%)</title><rect x="727.5" y="181" width="12.1" height="15.0" fill="rgb(251,176,45)" rx="2" ry="2" />
<text  x="730.49" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (423,991 us., 1.80%)</title><rect x="769.7" y="165" width="21.2" height="15.0" fill="rgb(237,180,8)" rx="2" ry="2" />
<text  x="772.70" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,732,404 us., 32.80%)</title><rect x="339.9" y="133" width="387.0" height="15.0" fill="rgb(244,113,45)" rx="2" ry="2" />
<text  x="342.85" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (9,501 us., 0.04%)</title><rect x="727.0" y="197" width="0.5" height="15.0" fill="rgb(240,45,25)" rx="2" ry="2" />
<text  x="730.02" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fe7af6a29c0&gt; (21,178 us., 0.09%)</title><rect x="206.9" y="261" width="1.1" height="15.0" fill="rgb(253,28,49)" rx="2" ry="2" />
<text  x="209.92" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (423,991 us., 1.80%)</title><rect x="769.7" y="85" width="21.2" height="15.0" fill="rgb(231,144,36)" rx="2" ry="2" />
<text  x="772.70" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (248,144 us., 1.05%)</title><rect x="739.6" y="181" width="12.4" height="15.0" fill="rgb(220,212,2)" rx="2" ry="2" />
<text  x="742.60" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,489 us., 0.04%)</title><rect x="207.5" y="117" width="0.5" height="15.0" fill="rgb(216,62,43)" rx="2" ry="2" />
<text  x="210.46" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (7,732,404 us., 32.80%)</title><rect x="339.9" y="165" width="387.0" height="15.0" fill="rgb(252,11,6)" rx="2" ry="2" />
<text  x="342.85" y="175.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (704,059 us., 2.99%)</title><rect x="10.0" y="165" width="35.2" height="15.0" fill="rgb(238,213,24)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,970,279 us., 8.36%)</title><rect x="790.9" y="197" width="98.6" height="15.0" fill="rgb(243,16,11)" rx="2" ry="2" />
<text  x="793.93" y="207.5" >torch_int/n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,216,212 us., 13.64%)</title><rect x="45.9" y="101" width="161.0" height="15.0" fill="rgb(222,14,45)" rx="2" ry="2" />
<text  x="48.94" y="111.5" >profiling/utils.py(1..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (15,897 us., 0.07%)</title><rect x="889.8" y="229" width="0.8" height="15.0" fill="rgb(207,44,50)" rx="2" ry="2" />
<text  x="892.76" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (423,991 us., 1.80%)</title><rect x="769.7" y="229" width="21.2" height="15.0" fill="rgb(232,140,23)" rx="2" ry="2" />
<text  x="772.70" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,970,531 us., 8.36%)</title><rect x="208.0" y="117" width="98.6" height="15.0" fill="rgb(219,184,6)" rx="2" ry="2" />
<text  x="210.98" y="127.5" >transformer..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,216,212 us., 13.64%)</title><rect x="45.9" y="85" width="161.0" height="15.0" fill="rgb(248,76,7)" rx="2" ry="2" />
<text  x="48.94" y="95.5" >torch/autograd/grad_..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (22,389 us., 0.09%)</title><rect x="307.0" y="197" width="1.1" height="15.0" fill="rgb(210,213,35)" rx="2" ry="2" />
<text  x="310.02" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,970,279 us., 8.36%)</title><rect x="790.9" y="101" width="98.6" height="15.0" fill="rgb(237,145,15)" rx="2" ry="2" />
<text  x="793.93" y="111.5" >profiling/u..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,501 us., 0.04%)</title><rect x="727.0" y="149" width="0.5" height="15.0" fill="rgb(208,109,48)" rx="2" ry="2" />
<text  x="730.02" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,046 us., 0.01%)</title><rect x="889.6" y="181" width="0.1" height="15.0" fill="rgb(212,128,5)" rx="2" ry="2" />
<text  x="892.57" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (633,508 us., 2.69%)</title><rect x="308.1" y="69" width="31.8" height="15.0" fill="rgb(248,102,36)" rx="2" ry="2" />
<text  x="311.14" y="79.5" >to..</text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (3,216,212 us., 13.64%)</title><rect x="45.9" y="213" width="161.0" height="15.0" fill="rgb(220,67,34)" rx="2" ry="2" />
<text  x="48.94" y="223.5" >nn.Module:_DQ_Add_La..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,689 us., 0.05%)</title><rect x="206.9" y="181" width="0.6" height="15.0" fill="rgb(238,105,32)" rx="2" ry="2" />
<text  x="209.92" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (353,356 us., 1.50%)</title><rect x="752.0" y="69" width="17.7" height="15.0" fill="rgb(226,44,32)" rx="2" ry="2" />
<text  x="755.02" y="79.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,981,883 us., 25.37%)</title><rect x="890.6" y="117" width="299.4" height="15.0" fill="rgb(213,116,2)" rx="2" ry="2" />
<text  x="893.55" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (248,144 us., 1.05%)</title><rect x="739.6" y="197" width="12.4" height="15.0" fill="rgb(218,218,36)" rx="2" ry="2" />
<text  x="742.60" y="207.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (21,178 us., 0.09%)</title><rect x="206.9" y="245" width="1.1" height="15.0" fill="rgb(208,201,5)" rx="2" ry="2" />
<text  x="209.92" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7fe7af6a29c0&gt; (12,204 us., 0.05%)</title><rect x="45.2" y="261" width="0.7" height="15.0" fill="rgb(239,54,37)" rx="2" ry="2" />
<text  x="48.24" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (353,356 us., 1.50%)</title><rect x="752.0" y="53" width="17.7" height="15.0" fill="rgb(252,192,53)" rx="2" ry="2" />
<text  x="755.02" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,970,531 us., 8.36%)</title><rect x="208.0" y="165" width="98.6" height="15.0" fill="rgb(205,220,0)" rx="2" ry="2" />
<text  x="210.98" y="175.5" >nn.Module:_..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,970,531 us., 8.36%)</title><rect x="208.0" y="213" width="98.6" height="15.0" fill="rgb(253,64,25)" rx="2" ry="2" />
<text  x="210.98" y="223.5" >torch/autog..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,501 us., 0.04%)</title><rect x="727.0" y="133" width="0.5" height="15.0" fill="rgb(207,122,4)" rx="2" ry="2" />
<text  x="730.02" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (704,059 us., 2.99%)</title><rect x="10.0" y="181" width="35.2" height="15.0" fill="rgb(234,150,35)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >pr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,046 us., 0.01%)</title><rect x="889.6" y="213" width="0.1" height="15.0" fill="rgb(248,119,3)" rx="2" ry="2" />
<text  x="892.57" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (248,144 us., 1.05%)</title><rect x="739.6" y="53" width="12.4" height="15.0" fill="rgb(244,130,23)" rx="2" ry="2" />
<text  x="742.60" y="63.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (1,970,531 us., 8.36%)</title><rect x="208.0" y="245" width="98.6" height="15.0" fill="rgb(250,154,45)" rx="2" ry="2" />
<text  x="210.98" y="255.5" >torch/nn/fu..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,689 us., 0.05%)</title><rect x="206.9" y="117" width="0.6" height="15.0" fill="rgb(242,201,36)" rx="2" ry="2" />
<text  x="209.92" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (353,356 us., 1.50%)</title><rect x="752.0" y="245" width="17.7" height="15.0" fill="rgb(214,127,50)" rx="2" ry="2" />
<text  x="755.02" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (7,732,404 us., 32.80%)</title><rect x="339.9" y="213" width="387.0" height="15.0" fill="rgb(210,45,34)" rx="2" ry="2" />
<text  x="342.85" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (22,389 us., 0.09%)</title><rect x="307.0" y="213" width="1.1" height="15.0" fill="rgb(249,210,45)" rx="2" ry="2" />
<text  x="310.02" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,489 us., 0.04%)</title><rect x="207.5" y="165" width="0.5" height="15.0" fill="rgb(252,226,53)" rx="2" ry="2" />
<text  x="210.46" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (633,508 us., 2.69%)</title><rect x="308.1" y="181" width="31.8" height="15.0" fill="rgb(247,30,6)" rx="2" ry="2" />
<text  x="311.14" y="191.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (241,853 us., 1.03%)</title><rect x="727.5" y="197" width="12.1" height="15.0" fill="rgb(236,148,23)" rx="2" ry="2" />
<text  x="730.49" y="207.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (704,059 us., 2.99%)</title><rect x="10.0" y="245" width="35.2" height="15.0" fill="rgb(236,179,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >to..</text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (489,997 us., 2.08%)</title><rect x="727.5" y="245" width="24.5" height="15.0" fill="rgb(218,159,27)" rx="2" ry="2" />
<text  x="730.49" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,216,212 us., 13.64%)</title><rect x="45.9" y="181" width="161.0" height="15.0" fill="rgb(217,48,37)" rx="2" ry="2" />
<text  x="48.94" y="191.5" >nn.Module:_Int8OPTDe..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (241,853 us., 1.03%)</title><rect x="727.5" y="101" width="12.1" height="15.0" fill="rgb(234,202,37)" rx="2" ry="2" />
<text  x="730.49" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,970,531 us., 8.36%)</title><rect x="208.0" y="181" width="98.6" height="15.0" fill="rgb(253,85,24)" rx="2" ry="2" />
<text  x="210.98" y="191.5" >torch_int/n..</text>
</g>
<g >
<title>nn.Module:_Embedding (10,689 us., 0.05%)</title><rect x="206.9" y="213" width="0.6" height="15.0" fill="rgb(237,182,40)" rx="2" ry="2" />
<text  x="209.92" y="223.5" ></text>
</g>
<g >
<title>torch_int/functional/fused.py(24):_dq_add_layernorm_q_cpp (3,216,212 us., 13.64%)</title><rect x="45.9" y="245" width="161.0" height="15.0" fill="rgb(227,107,38)" rx="2" ry="2" />
<text  x="48.94" y="255.5" >torch_int/functional..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (5,981,883 us., 25.37%)</title><rect x="890.6" y="213" width="299.4" height="15.0" fill="rgb(226,228,44)" rx="2" ry="2" />
<text  x="893.55" y="223.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (15,897 us., 0.07%)</title><rect x="889.8" y="197" width="0.8" height="15.0" fill="rgb(248,225,53)" rx="2" ry="2" />
<text  x="892.76" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,501 us., 0.04%)</title><rect x="727.0" y="181" width="0.5" height="15.0" fill="rgb(226,143,15)" rx="2" ry="2" />
<text  x="730.02" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,208 us., 0.03%)</title><rect x="306.6" y="165" width="0.4" height="15.0" fill="rgb(216,166,50)" rx="2" ry="2" />
<text  x="309.61" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (2,174 us., 0.01%)</title><rect x="726.9" y="229" width="0.1" height="15.0" fill="rgb(215,78,5)" rx="2" ry="2" />
<text  x="729.91" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (633,508 us., 2.69%)</title><rect x="308.1" y="197" width="31.8" height="15.0" fill="rgb(207,119,11)" rx="2" ry="2" />
<text  x="311.14" y="207.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (12,204 us., 0.05%)</title><rect x="45.2" y="213" width="0.7" height="15.0" fill="rgb(247,216,7)" rx="2" ry="2" />
<text  x="48.24" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,981,883 us., 25.37%)</title><rect x="890.6" y="133" width="299.4" height="15.0" fill="rgb(206,174,39)" rx="2" ry="2" />
<text  x="893.55" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,689 us., 0.05%)</title><rect x="206.9" y="149" width="0.6" height="15.0" fill="rgb(228,14,29)" rx="2" ry="2" />
<text  x="209.92" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (353,356 us., 1.50%)</title><rect x="752.0" y="149" width="17.7" height="15.0" fill="rgb(244,136,53)" rx="2" ry="2" />
<text  x="755.02" y="159.5" ></text>
</g>
<g >
<title>all (23,574,597 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(217,227,41)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,689 us., 0.05%)</title><rect x="206.9" y="133" width="0.6" height="15.0" fill="rgb(218,0,7)" rx="2" ry="2" />
<text  x="209.92" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (423,991 us., 1.80%)</title><rect x="769.7" y="101" width="21.2" height="15.0" fill="rgb(233,48,10)" rx="2" ry="2" />
<text  x="772.70" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (10,689 us., 0.05%)</title><rect x="206.9" y="197" width="0.6" height="15.0" fill="rgb(242,220,47)" rx="2" ry="2" />
<text  x="209.92" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (353,356 us., 1.50%)</title><rect x="752.0" y="213" width="17.7" height="15.0" fill="rgb(221,138,0)" rx="2" ry="2" />
<text  x="755.02" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,216,212 us., 13.64%)</title><rect x="45.9" y="149" width="161.0" height="15.0" fill="rgb(252,12,46)" rx="2" ry="2" />
<text  x="48.94" y="159.5" >nn.Module:_Int8OPTDe..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (2,174 us., 0.01%)</title><rect x="726.9" y="213" width="0.1" height="15.0" fill="rgb(224,43,18)" rx="2" ry="2" />
<text  x="729.91" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fe7af6a29c0&gt; (1,970,279 us., 8.36%)</title><rect x="790.9" y="261" width="98.6" height="15.0" fill="rgb(252,152,22)" rx="2" ry="2" />
<text  x="793.93" y="271.5" >&lt;built-in_m..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (7,732,404 us., 32.80%)</title><rect x="339.9" y="181" width="387.0" height="15.0" fill="rgb(206,180,39)" rx="2" ry="2" />
<text  x="342.85" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (248,144 us., 1.05%)</title><rect x="739.6" y="85" width="12.4" height="15.0" fill="rgb(235,172,29)" rx="2" ry="2" />
<text  x="742.60" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,489 us., 0.04%)</title><rect x="207.5" y="149" width="0.5" height="15.0" fill="rgb(248,223,46)" rx="2" ry="2" />
<text  x="210.46" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fe6bab35e70&gt; (423,991 us., 1.80%)</title><rect x="769.7" y="261" width="21.2" height="15.0" fill="rgb(206,69,40)" rx="2" ry="2" />
<text  x="772.70" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (353,356 us., 1.50%)</title><rect x="752.0" y="181" width="17.7" height="15.0" fill="rgb(229,213,42)" rx="2" ry="2" />
<text  x="755.02" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (353,356 us., 1.50%)</title><rect x="752.0" y="85" width="17.7" height="15.0" fill="rgb(252,176,36)" rx="2" ry="2" />
<text  x="755.02" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (489,997 us., 2.08%)</title><rect x="727.5" y="229" width="24.5" height="15.0" fill="rgb(210,72,1)" rx="2" ry="2" />
<text  x="730.49" y="239.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,970,279 us., 8.36%)</title><rect x="790.9" y="213" width="98.6" height="15.0" fill="rgb(219,214,17)" rx="2" ry="2" />
<text  x="793.93" y="223.5" >nn.Module:_..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (248,144 us., 1.05%)</title><rect x="739.6" y="69" width="12.4" height="15.0" fill="rgb(216,153,35)" rx="2" ry="2" />
<text  x="742.60" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B32O32LinearWithScaling (489,997 us., 2.08%)</title><rect x="727.5" y="213" width="24.5" height="15.0" fill="rgb(212,201,31)" rx="2" ry="2" />
<text  x="730.49" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (353,356 us., 1.50%)</title><rect x="752.0" y="133" width="17.7" height="15.0" fill="rgb(212,163,0)" rx="2" ry="2" />
<text  x="755.02" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,689 us., 0.05%)</title><rect x="206.9" y="165" width="0.6" height="15.0" fill="rgb(237,177,15)" rx="2" ry="2" />
<text  x="209.92" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (10,489 us., 0.04%)</title><rect x="207.5" y="213" width="0.5" height="15.0" fill="rgb(242,118,21)" rx="2" ry="2" />
<text  x="210.46" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,970,279 us., 8.36%)</title><rect x="790.9" y="165" width="98.6" height="15.0" fill="rgb(205,120,12)" rx="2" ry="2" />
<text  x="793.93" y="175.5" >torch_int/n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (248,144 us., 1.05%)</title><rect x="739.6" y="165" width="12.4" height="15.0" fill="rgb(217,153,51)" rx="2" ry="2" />
<text  x="742.60" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (5,981,883 us., 25.37%)</title><rect x="890.6" y="229" width="299.4" height="15.0" fill="rgb(250,126,21)" rx="2" ry="2" />
<text  x="893.55" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (353,356 us., 1.50%)</title><rect x="752.0" y="197" width="17.7" height="15.0" fill="rgb(206,112,2)" rx="2" ry="2" />
<text  x="755.02" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (423,991 us., 1.80%)</title><rect x="769.7" y="149" width="21.2" height="15.0" fill="rgb(211,168,1)" rx="2" ry="2" />
<text  x="772.70" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,970,531 us., 8.36%)</title><rect x="208.0" y="101" width="98.6" height="15.0" fill="rgb(236,39,0)" rx="2" ry="2" />
<text  x="210.98" y="111.5" >nn.Module:_..</text>
</g>
</g>
</svg>
