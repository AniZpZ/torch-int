<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (378,438 us., 3.17%)</title><rect x="10.0" y="165" width="37.5" height="15.0" fill="rgb(218,46,7)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >tor..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (6,198 us., 0.05%)</title><rect x="47.5" y="229" width="0.6" height="15.0" fill="rgb(218,75,46)" rx="2" ry="2" />
<text  x="50.46" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (327,911 us., 2.75%)</title><rect x="308.2" y="245" width="32.5" height="15.0" fill="rgb(216,97,30)" rx="2" ry="2" />
<text  x="311.25" y="255.5" >to..</text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (252,992 us., 2.12%)</title><rect x="727.0" y="245" width="25.1" height="15.0" fill="rgb(226,129,27)" rx="2" ry="2" />
<text  x="730.03" y="255.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,600 us., 0.01%)</title><rect x="48.1" y="181" width="0.1" height="15.0" fill="rgb(246,33,3)" rx="2" ry="2" />
<text  x="51.07" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (989,250 us., 8.30%)</title><rect x="792.9" y="245" width="97.9" height="15.0" fill="rgb(211,196,11)" rx="2" ry="2" />
<text  x="795.87" y="255.5" >torch_int/n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (5,357 us., 0.04%)</title><rect x="208.1" y="213" width="0.5" height="15.0" fill="rgb(227,79,4)" rx="2" ry="2" />
<text  x="211.07" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fe3e4e56e70&gt; (217,636 us., 1.83%)</title><rect x="771.3" y="261" width="21.6" height="15.0" fill="rgb(244,155,29)" rx="2" ry="2" />
<text  x="774.33" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (1,609,229 us., 13.50%)</title><rect x="48.2" y="213" width="159.3" height="15.0" fill="rgb(216,77,28)" rx="2" ry="2" />
<text  x="51.23" y="223.5" >nn.Module:_DQ_Add_La..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,075 us., 0.03%)</title><rect x="306.7" y="181" width="0.4" height="15.0" fill="rgb(229,205,12)" rx="2" ry="2" />
<text  x="309.70" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (217,636 us., 1.83%)</title><rect x="771.3" y="149" width="21.6" height="15.0" fill="rgb(252,22,12)" rx="2" ry="2" />
<text  x="774.33" y="159.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (6,198 us., 0.05%)</title><rect x="47.5" y="213" width="0.6" height="15.0" fill="rgb(205,17,2)" rx="2" ry="2" />
<text  x="50.46" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,520 us., 0.05%)</title><rect x="207.5" y="165" width="0.6" height="15.0" fill="rgb(220,19,15)" rx="2" ry="2" />
<text  x="210.53" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,565 us., 0.01%)</title><rect x="890.8" y="181" width="0.2" height="15.0" fill="rgb(212,79,42)" rx="2" ry="2" />
<text  x="893.85" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (991,009 us., 8.31%)</title><rect x="208.6" y="229" width="98.1" height="15.0" fill="rgb(216,7,12)" rx="2" ry="2" />
<text  x="211.60" y="239.5" >torch_int/n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,896,313 us., 32.69%)</title><rect x="340.7" y="101" width="385.7" height="15.0" fill="rgb(209,59,22)" rx="2" ry="2" />
<text  x="343.71" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (194,532 us., 1.63%)</title><rect x="752.1" y="53" width="19.2" height="15.0" fill="rgb(219,79,33)" rx="2" ry="2" />
<text  x="755.07" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,600 us., 0.01%)</title><rect x="48.1" y="133" width="0.1" height="15.0" fill="rgb(209,13,9)" rx="2" ry="2" />
<text  x="51.07" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (194,532 us., 1.63%)</title><rect x="752.1" y="101" width="19.2" height="15.0" fill="rgb(237,74,18)" rx="2" ry="2" />
<text  x="755.07" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,896,313 us., 32.69%)</title><rect x="340.7" y="117" width="385.7" height="15.0" fill="rgb(209,106,48)" rx="2" ry="2" />
<text  x="343.71" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (194,532 us., 1.63%)</title><rect x="752.1" y="165" width="19.2" height="15.0" fill="rgb(235,169,14)" rx="2" ry="2" />
<text  x="755.07" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,512 us., 0.01%)</title><rect x="726.4" y="213" width="0.2" height="15.0" fill="rgb(216,201,54)" rx="2" ry="2" />
<text  x="729.43" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fe3e54ba450&gt; (5,232,693 us., 43.90%)</title><rect x="208.6" y="261" width="518.0" height="15.0" fill="rgb(252,170,52)" rx="2" ry="2" />
<text  x="211.60" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fe3e54ba450&gt;</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,011,358 us., 25.26%)</title><rect x="891.9" y="101" width="298.0" height="15.0" fill="rgb(205,15,8)" rx="2" ry="2" />
<text  x="894.85" y="111.5" >torch/autograd/grad_mode.py(27):_decorat..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (989,250 us., 8.30%)</title><rect x="792.9" y="149" width="97.9" height="15.0" fill="rgb(223,166,39)" rx="2" ry="2" />
<text  x="795.87" y="159.5" >nn.Module:_..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (128,255 us., 1.08%)</title><rect x="739.4" y="37" width="12.7" height="15.0" fill="rgb(210,21,45)" rx="2" ry="2" />
<text  x="742.38" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (378,438 us., 3.17%)</title><rect x="10.0" y="197" width="37.5" height="15.0" fill="rgb(212,61,39)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn...</text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7fe4d99c39c0&gt; (1,565 us., 0.01%)</title><rect x="890.8" y="261" width="0.2" height="15.0" fill="rgb(244,105,44)" rx="2" ry="2" />
<text  x="893.85" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,585 us., 0.04%)</title><rect x="726.6" y="181" width="0.4" height="15.0" fill="rgb(218,126,6)" rx="2" ry="2" />
<text  x="729.58" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (991,009 us., 8.31%)</title><rect x="208.6" y="197" width="98.1" height="15.0" fill="rgb(214,185,15)" rx="2" ry="2" />
<text  x="211.60" y="207.5" >nn.Module:_..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,512 us., 0.01%)</title><rect x="726.4" y="149" width="0.2" height="15.0" fill="rgb(253,75,27)" rx="2" ry="2" />
<text  x="729.43" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,512 us., 0.01%)</title><rect x="726.4" y="165" width="0.2" height="15.0" fill="rgb(209,143,48)" rx="2" ry="2" />
<text  x="729.43" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,565 us., 0.01%)</title><rect x="890.8" y="229" width="0.2" height="15.0" fill="rgb(229,136,43)" rx="2" ry="2" />
<text  x="893.85" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (124,737 us., 1.05%)</title><rect x="727.0" y="117" width="12.4" height="15.0" fill="rgb(215,103,20)" rx="2" ry="2" />
<text  x="730.03" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (194,532 us., 1.63%)</title><rect x="752.1" y="133" width="19.2" height="15.0" fill="rgb(211,57,43)" rx="2" ry="2" />
<text  x="755.07" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,609,229 us., 13.50%)</title><rect x="48.2" y="181" width="159.3" height="15.0" fill="rgb(223,144,0)" rx="2" ry="2" />
<text  x="51.23" y="191.5" >nn.Module:_Int8OPTDe..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (128,255 us., 1.08%)</title><rect x="739.4" y="197" width="12.7" height="15.0" fill="rgb(250,166,17)" rx="2" ry="2" />
<text  x="742.38" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,520 us., 0.05%)</title><rect x="207.5" y="133" width="0.6" height="15.0" fill="rgb(242,22,39)" rx="2" ry="2" />
<text  x="210.53" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (4,585 us., 0.04%)</title><rect x="726.6" y="213" width="0.4" height="15.0" fill="rgb(226,134,43)" rx="2" ry="2" />
<text  x="729.58" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,585 us., 0.04%)</title><rect x="726.6" y="149" width="0.4" height="15.0" fill="rgb(225,108,13)" rx="2" ry="2" />
<text  x="729.58" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,357 us., 0.04%)</title><rect x="208.1" y="117" width="0.5" height="15.0" fill="rgb(214,9,16)" rx="2" ry="2" />
<text  x="211.07" y="127.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (378,438 us., 3.17%)</title><rect x="10.0" y="245" width="37.5" height="15.0" fill="rgb(239,45,10)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >tor..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (217,636 us., 1.83%)</title><rect x="771.3" y="133" width="21.6" height="15.0" fill="rgb(210,31,5)" rx="2" ry="2" />
<text  x="774.33" y="143.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (6,198 us., 0.05%)</title><rect x="47.5" y="245" width="0.6" height="15.0" fill="rgb(231,78,50)" rx="2" ry="2" />
<text  x="50.46" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (327,911 us., 2.75%)</title><rect x="308.2" y="229" width="32.5" height="15.0" fill="rgb(241,63,0)" rx="2" ry="2" />
<text  x="311.25" y="239.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (128,255 us., 1.08%)</title><rect x="739.4" y="133" width="12.7" height="15.0" fill="rgb(221,116,9)" rx="2" ry="2" />
<text  x="742.38" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (991,009 us., 8.31%)</title><rect x="208.6" y="213" width="98.1" height="15.0" fill="rgb(243,83,10)" rx="2" ry="2" />
<text  x="211.60" y="223.5" >torch/autog..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (989,250 us., 8.30%)</title><rect x="792.9" y="197" width="97.9" height="15.0" fill="rgb(220,127,5)" rx="2" ry="2" />
<text  x="795.87" y="207.5" >torch_int/n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (11,567 us., 0.10%)</title><rect x="307.1" y="245" width="1.1" height="15.0" fill="rgb(235,77,39)" rx="2" ry="2" />
<text  x="310.10" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,600 us., 0.01%)</title><rect x="48.1" y="149" width="0.1" height="15.0" fill="rgb(249,51,21)" rx="2" ry="2" />
<text  x="51.07" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (989,250 us., 8.30%)</title><rect x="792.9" y="85" width="97.9" height="15.0" fill="rgb(219,168,13)" rx="2" ry="2" />
<text  x="795.87" y="95.5" >torch/autog..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,609,229 us., 13.50%)</title><rect x="48.2" y="85" width="159.3" height="15.0" fill="rgb(235,8,34)" rx="2" ry="2" />
<text  x="51.23" y="95.5" >torch/autograd/grad_..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (194,532 us., 1.63%)</title><rect x="752.1" y="117" width="19.2" height="15.0" fill="rgb(219,132,26)" rx="2" ry="2" />
<text  x="755.07" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,896,313 us., 32.69%)</title><rect x="340.7" y="165" width="385.7" height="15.0" fill="rgb(246,146,53)" rx="2" ry="2" />
<text  x="343.71" y="175.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,357 us., 0.04%)</title><rect x="208.1" y="101" width="0.5" height="15.0" fill="rgb(239,144,51)" rx="2" ry="2" />
<text  x="211.07" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,565 us., 0.01%)</title><rect x="890.8" y="165" width="0.2" height="15.0" fill="rgb(219,164,5)" rx="2" ry="2" />
<text  x="893.85" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,585 us., 0.04%)</title><rect x="726.6" y="133" width="0.4" height="15.0" fill="rgb(210,172,27)" rx="2" ry="2" />
<text  x="729.58" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (194,532 us., 1.63%)</title><rect x="752.1" y="181" width="19.2" height="15.0" fill="rgb(222,221,39)" rx="2" ry="2" />
<text  x="755.07" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (991,009 us., 8.31%)</title><rect x="208.6" y="85" width="98.1" height="15.0" fill="rgb(250,86,28)" rx="2" ry="2" />
<text  x="211.60" y="95.5" >profiling/u..</text>
</g>
<g >
<title>torch_int/nn/linear.py(122):_forward (217,636 us., 1.83%)</title><rect x="771.3" y="245" width="21.6" height="15.0" fill="rgb(223,65,46)" rx="2" ry="2" />
<text  x="774.33" y="255.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,214 us., 0.07%)</title><rect x="891.0" y="181" width="0.9" height="15.0" fill="rgb(230,5,18)" rx="2" ry="2" />
<text  x="894.04" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,214 us., 0.07%)</title><rect x="891.0" y="197" width="0.9" height="15.0" fill="rgb(219,95,44)" rx="2" ry="2" />
<text  x="894.04" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,075 us., 0.03%)</title><rect x="306.7" y="149" width="0.4" height="15.0" fill="rgb(209,15,42)" rx="2" ry="2" />
<text  x="309.70" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,520 us., 0.05%)</title><rect x="207.5" y="149" width="0.6" height="15.0" fill="rgb(250,73,45)" rx="2" ry="2" />
<text  x="210.53" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (217,636 us., 1.83%)</title><rect x="771.3" y="181" width="21.6" height="15.0" fill="rgb(239,86,41)" rx="2" ry="2" />
<text  x="774.33" y="191.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (989,250 us., 8.30%)</title><rect x="792.9" y="181" width="97.9" height="15.0" fill="rgb(251,98,54)" rx="2" ry="2" />
<text  x="795.87" y="191.5" >nn.Module:_..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,585 us., 0.04%)</title><rect x="726.6" y="165" width="0.4" height="15.0" fill="rgb(222,95,15)" rx="2" ry="2" />
<text  x="729.58" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (989,250 us., 8.30%)</title><rect x="792.9" y="213" width="97.9" height="15.0" fill="rgb(225,67,48)" rx="2" ry="2" />
<text  x="795.87" y="223.5" >nn.Module:_..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,075 us., 0.03%)</title><rect x="306.7" y="165" width="0.4" height="15.0" fill="rgb(237,152,0)" rx="2" ry="2" />
<text  x="309.70" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (194,532 us., 1.63%)</title><rect x="752.1" y="149" width="19.2" height="15.0" fill="rgb(242,102,29)" rx="2" ry="2" />
<text  x="755.07" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,600 us., 0.01%)</title><rect x="48.1" y="213" width="0.1" height="15.0" fill="rgb(238,218,45)" rx="2" ry="2" />
<text  x="51.07" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,609,229 us., 13.50%)</title><rect x="48.2" y="165" width="159.3" height="15.0" fill="rgb(219,112,52)" rx="2" ry="2" />
<text  x="51.23" y="175.5" >torch_int/nn/opt.py(..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,214 us., 0.07%)</title><rect x="891.0" y="229" width="0.9" height="15.0" fill="rgb(234,91,4)" rx="2" ry="2" />
<text  x="894.04" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (124,737 us., 1.05%)</title><rect x="727.0" y="85" width="12.4" height="15.0" fill="rgb(228,28,9)" rx="2" ry="2" />
<text  x="730.03" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_with_scaling_of_PyCapsule_object_at_0x7fe3e4e56ed0&gt; (252,992 us., 2.12%)</title><rect x="727.0" y="261" width="25.1" height="15.0" fill="rgb(216,223,32)" rx="2" ry="2" />
<text  x="730.03" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/functional/fused.py(24):_dq_add_layernorm_q_cpp (1,609,229 us., 13.50%)</title><rect x="48.2" y="245" width="159.3" height="15.0" fill="rgb(248,109,13)" rx="2" ry="2" />
<text  x="51.23" y="255.5" >torch_int/functional..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (989,250 us., 8.30%)</title><rect x="792.9" y="133" width="97.9" height="15.0" fill="rgb(232,147,13)" rx="2" ry="2" />
<text  x="795.87" y="143.5" >transformer..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (128,255 us., 1.08%)</title><rect x="739.4" y="53" width="12.7" height="15.0" fill="rgb(208,124,47)" rx="2" ry="2" />
<text  x="742.38" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (327,911 us., 2.75%)</title><rect x="308.2" y="133" width="32.5" height="15.0" fill="rgb(243,202,17)" rx="2" ry="2" />
<text  x="311.25" y="143.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,011,358 us., 25.26%)</title><rect x="891.9" y="229" width="298.0" height="15.0" fill="rgb(215,47,41)" rx="2" ry="2" />
<text  x="894.85" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,011,358 us., 25.26%)</title><rect x="891.9" y="245" width="298.0" height="15.0" fill="rgb(229,120,3)" rx="2" ry="2" />
<text  x="894.85" y="255.5" >torch/autograd/grad_mode.py(24):_decorat..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,075 us., 0.03%)</title><rect x="306.7" y="197" width="0.4" height="15.0" fill="rgb(244,155,47)" rx="2" ry="2" />
<text  x="309.70" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (378,438 us., 3.17%)</title><rect x="10.0" y="261" width="37.5" height="15.0" fill="rgb(228,191,17)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;bu..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (991,009 us., 8.31%)</title><rect x="208.6" y="149" width="98.1" height="15.0" fill="rgb(231,153,23)" rx="2" ry="2" />
<text  x="211.60" y="159.5" >torch_int/n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,896,313 us., 32.69%)</title><rect x="340.7" y="133" width="385.7" height="15.0" fill="rgb(254,12,36)" rx="2" ry="2" />
<text  x="343.71" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (194,532 us., 1.63%)</title><rect x="752.1" y="245" width="19.2" height="15.0" fill="rgb(231,165,51)" rx="2" ry="2" />
<text  x="755.07" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (124,737 us., 1.05%)</title><rect x="727.0" y="165" width="12.4" height="15.0" fill="rgb(205,3,32)" rx="2" ry="2" />
<text  x="730.03" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,520 us., 0.05%)</title><rect x="207.5" y="117" width="0.6" height="15.0" fill="rgb(248,192,1)" rx="2" ry="2" />
<text  x="210.53" y="127.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (4,585 us., 0.04%)</title><rect x="726.6" y="245" width="0.4" height="15.0" fill="rgb(206,175,0)" rx="2" ry="2" />
<text  x="729.58" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (217,636 us., 1.83%)</title><rect x="771.3" y="213" width="21.6" height="15.0" fill="rgb(230,204,33)" rx="2" ry="2" />
<text  x="774.33" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,609,229 us., 13.50%)</title><rect x="48.2" y="117" width="159.3" height="15.0" fill="rgb(229,10,10)" rx="2" ry="2" />
<text  x="51.23" y="127.5" >nn.Module:_Int8OPTFo..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,565 us., 0.01%)</title><rect x="890.8" y="213" width="0.2" height="15.0" fill="rgb(214,39,19)" rx="2" ry="2" />
<text  x="893.85" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,520 us., 0.05%)</title><rect x="207.5" y="181" width="0.6" height="15.0" fill="rgb(251,58,43)" rx="2" ry="2" />
<text  x="210.53" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (327,911 us., 2.75%)</title><rect x="308.2" y="165" width="32.5" height="15.0" fill="rgb(252,224,27)" rx="2" ry="2" />
<text  x="311.25" y="175.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (991,009 us., 8.31%)</title><rect x="208.6" y="165" width="98.1" height="15.0" fill="rgb(247,50,51)" rx="2" ry="2" />
<text  x="211.60" y="175.5" >nn.Module:_..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (194,532 us., 1.63%)</title><rect x="752.1" y="37" width="19.2" height="15.0" fill="rgb(237,214,50)" rx="2" ry="2" />
<text  x="755.07" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (989,250 us., 8.30%)</title><rect x="792.9" y="117" width="97.9" height="15.0" fill="rgb(207,73,14)" rx="2" ry="2" />
<text  x="795.87" y="127.5" >nn.Module:_..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (11,567 us., 0.10%)</title><rect x="307.1" y="181" width="1.1" height="15.0" fill="rgb(239,129,50)" rx="2" ry="2" />
<text  x="310.10" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (128,255 us., 1.08%)</title><rect x="739.4" y="117" width="12.7" height="15.0" fill="rgb(215,23,0)" rx="2" ry="2" />
<text  x="742.38" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,075 us., 0.03%)</title><rect x="306.7" y="229" width="0.4" height="15.0" fill="rgb(251,99,49)" rx="2" ry="2" />
<text  x="309.70" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (327,911 us., 2.75%)</title><rect x="308.2" y="149" width="32.5" height="15.0" fill="rgb(247,180,32)" rx="2" ry="2" />
<text  x="311.25" y="159.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (4,075 us., 0.03%)</title><rect x="306.7" y="245" width="0.4" height="15.0" fill="rgb(214,102,49)" rx="2" ry="2" />
<text  x="309.70" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,011,358 us., 25.26%)</title><rect x="891.9" y="133" width="298.0" height="15.0" fill="rgb(213,125,28)" rx="2" ry="2" />
<text  x="894.85" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (217,636 us., 1.83%)</title><rect x="771.3" y="197" width="21.6" height="15.0" fill="rgb(217,35,1)" rx="2" ry="2" />
<text  x="774.33" y="207.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (124,737 us., 1.05%)</title><rect x="727.0" y="197" width="12.4" height="15.0" fill="rgb(226,90,32)" rx="2" ry="2" />
<text  x="730.03" y="207.5" ></text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (10,877 us., 0.09%)</title><rect x="207.5" y="229" width="1.1" height="15.0" fill="rgb(212,55,12)" rx="2" ry="2" />
<text  x="210.53" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,896,313 us., 32.69%)</title><rect x="340.7" y="85" width="385.7" height="15.0" fill="rgb(231,57,46)" rx="2" ry="2" />
<text  x="343.71" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,214 us., 0.07%)</title><rect x="891.0" y="245" width="0.9" height="15.0" fill="rgb(248,107,19)" rx="2" ry="2" />
<text  x="894.04" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (124,737 us., 1.05%)</title><rect x="727.0" y="133" width="12.4" height="15.0" fill="rgb(218,229,26)" rx="2" ry="2" />
<text  x="730.03" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (5,520 us., 0.05%)</title><rect x="207.5" y="197" width="0.6" height="15.0" fill="rgb(251,144,32)" rx="2" ry="2" />
<text  x="210.53" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (3,896,313 us., 32.69%)</title><rect x="340.7" y="245" width="385.7" height="15.0" fill="rgb(217,35,20)" rx="2" ry="2" />
<text  x="343.71" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (989,250 us., 8.30%)</title><rect x="792.9" y="229" width="97.9" height="15.0" fill="rgb(247,77,4)" rx="2" ry="2" />
<text  x="795.87" y="239.5" >torch/autog..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (3,011,358 us., 25.26%)</title><rect x="891.9" y="213" width="298.0" height="15.0" fill="rgb(210,155,23)" rx="2" ry="2" />
<text  x="894.85" y="223.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (11,567 us., 0.10%)</title><rect x="307.1" y="165" width="1.1" height="15.0" fill="rgb(245,11,38)" rx="2" ry="2" />
<text  x="310.10" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (194,532 us., 1.63%)</title><rect x="752.1" y="213" width="19.2" height="15.0" fill="rgb(238,179,17)" rx="2" ry="2" />
<text  x="755.07" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,585 us., 0.04%)</title><rect x="726.6" y="197" width="0.4" height="15.0" fill="rgb(239,118,18)" rx="2" ry="2" />
<text  x="729.58" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,512 us., 0.01%)</title><rect x="726.4" y="181" width="0.2" height="15.0" fill="rgb(212,20,1)" rx="2" ry="2" />
<text  x="729.43" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (327,911 us., 2.75%)</title><rect x="308.2" y="85" width="32.5" height="15.0" fill="rgb(214,202,54)" rx="2" ry="2" />
<text  x="311.25" y="95.5" >pr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (11,567 us., 0.10%)</title><rect x="307.1" y="213" width="1.1" height="15.0" fill="rgb(253,178,45)" rx="2" ry="2" />
<text  x="310.10" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,585 us., 0.04%)</title><rect x="726.6" y="117" width="0.4" height="15.0" fill="rgb(239,39,3)" rx="2" ry="2" />
<text  x="729.58" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,075 us., 0.03%)</title><rect x="306.7" y="213" width="0.4" height="15.0" fill="rgb(250,177,8)" rx="2" ry="2" />
<text  x="309.70" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7fe4d99c39c0&gt; (1,600 us., 0.01%)</title><rect x="48.1" y="261" width="0.1" height="15.0" fill="rgb(244,188,45)" rx="2" ry="2" />
<text  x="51.07" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,011,358 us., 25.26%)</title><rect x="891.9" y="165" width="298.0" height="15.0" fill="rgb(222,159,2)" rx="2" ry="2" />
<text  x="894.85" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,609,229 us., 13.50%)</title><rect x="48.2" y="197" width="159.3" height="15.0" fill="rgb(235,72,35)" rx="2" ry="2" />
<text  x="51.23" y="207.5" >torch_int/nn/opt.py(..</text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7fe3e4e56f30&gt; (1,609,229 us., 13.50%)</title><rect x="48.2" y="261" width="159.3" height="15.0" fill="rgb(249,99,48)" rx="2" ry="2" />
<text  x="51.23" y="271.5" >&lt;built-in_method_dq_..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (378,438 us., 3.17%)</title><rect x="10.0" y="181" width="37.5" height="15.0" fill="rgb(251,164,39)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >pro..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (194,532 us., 1.63%)</title><rect x="752.1" y="229" width="19.2" height="15.0" fill="rgb(228,94,31)" rx="2" ry="2" />
<text  x="755.07" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (3,896,313 us., 32.69%)</title><rect x="340.7" y="197" width="385.7" height="15.0" fill="rgb(208,207,37)" rx="2" ry="2" />
<text  x="343.71" y="207.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (124,737 us., 1.05%)</title><rect x="727.0" y="149" width="12.4" height="15.0" fill="rgb(236,53,31)" rx="2" ry="2" />
<text  x="730.03" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (378,438 us., 3.17%)</title><rect x="10.0" y="213" width="37.5" height="15.0" fill="rgb(223,152,38)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >tra..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,609,229 us., 13.50%)</title><rect x="48.2" y="133" width="159.3" height="15.0" fill="rgb(206,87,36)" rx="2" ry="2" />
<text  x="51.23" y="143.5" >transformers/models/..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (989,250 us., 8.30%)</title><rect x="792.9" y="101" width="97.9" height="15.0" fill="rgb(229,109,25)" rx="2" ry="2" />
<text  x="795.87" y="111.5" >profiling/u..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,896,313 us., 32.69%)</title><rect x="340.7" y="149" width="385.7" height="15.0" fill="rgb(217,80,47)" rx="2" ry="2" />
<text  x="343.71" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (194,532 us., 1.63%)</title><rect x="752.1" y="69" width="19.2" height="15.0" fill="rgb(216,8,8)" rx="2" ry="2" />
<text  x="755.07" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (5,357 us., 0.04%)</title><rect x="208.1" y="181" width="0.5" height="15.0" fill="rgb(241,187,23)" rx="2" ry="2" />
<text  x="211.07" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (991,009 us., 8.31%)</title><rect x="208.6" y="69" width="98.1" height="15.0" fill="rgb(241,160,11)" rx="2" ry="2" />
<text  x="211.60" y="79.5" >torch/autog..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (989,250 us., 8.30%)</title><rect x="792.9" y="165" width="97.9" height="15.0" fill="rgb(210,164,47)" rx="2" ry="2" />
<text  x="795.87" y="175.5" >torch_int/n..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (5,357 us., 0.04%)</title><rect x="208.1" y="197" width="0.5" height="15.0" fill="rgb(241,134,38)" rx="2" ry="2" />
<text  x="211.07" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,357 us., 0.04%)</title><rect x="208.1" y="133" width="0.5" height="15.0" fill="rgb(206,107,25)" rx="2" ry="2" />
<text  x="211.07" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (128,255 us., 1.08%)</title><rect x="739.4" y="149" width="12.7" height="15.0" fill="rgb(236,16,39)" rx="2" ry="2" />
<text  x="742.38" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (124,737 us., 1.05%)</title><rect x="727.0" y="101" width="12.4" height="15.0" fill="rgb(248,2,8)" rx="2" ry="2" />
<text  x="730.03" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (991,009 us., 8.31%)</title><rect x="208.6" y="181" width="98.1" height="15.0" fill="rgb(217,15,32)" rx="2" ry="2" />
<text  x="211.60" y="191.5" >torch_int/n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (327,911 us., 2.75%)</title><rect x="308.2" y="69" width="32.5" height="15.0" fill="rgb(215,21,53)" rx="2" ry="2" />
<text  x="311.25" y="79.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (11,567 us., 0.10%)</title><rect x="307.1" y="229" width="1.1" height="15.0" fill="rgb(231,199,16)" rx="2" ry="2" />
<text  x="310.10" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fe4d99c39c0&gt; (989,250 us., 8.30%)</title><rect x="792.9" y="261" width="97.9" height="15.0" fill="rgb(223,171,5)" rx="2" ry="2" />
<text  x="795.87" y="271.5" >&lt;built-in_m..</text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7fe4d99c39c0&gt; (6,198 us., 0.05%)</title><rect x="47.5" y="261" width="0.6" height="15.0" fill="rgb(237,201,35)" rx="2" ry="2" />
<text  x="50.46" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (991,009 us., 8.31%)</title><rect x="208.6" y="117" width="98.1" height="15.0" fill="rgb(237,45,12)" rx="2" ry="2" />
<text  x="211.60" y="127.5" >transformer..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,565 us., 0.01%)</title><rect x="890.8" y="197" width="0.2" height="15.0" fill="rgb(213,57,3)" rx="2" ry="2" />
<text  x="893.85" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (6,198 us., 0.05%)</title><rect x="47.5" y="181" width="0.6" height="15.0" fill="rgb(224,173,2)" rx="2" ry="2" />
<text  x="50.46" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,011,358 us., 25.26%)</title><rect x="891.9" y="149" width="298.0" height="15.0" fill="rgb(228,100,12)" rx="2" ry="2" />
<text  x="894.85" y="159.5" >transformers/models/opt/modeling_opt.py(..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (128,255 us., 1.08%)</title><rect x="739.4" y="69" width="12.7" height="15.0" fill="rgb(231,36,41)" rx="2" ry="2" />
<text  x="742.38" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (378,438 us., 3.17%)</title><rect x="10.0" y="229" width="37.5" height="15.0" fill="rgb(250,218,2)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn...</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (128,255 us., 1.08%)</title><rect x="739.4" y="165" width="12.7" height="15.0" fill="rgb(208,184,1)" rx="2" ry="2" />
<text  x="742.38" y="175.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (991,009 us., 8.31%)</title><rect x="208.6" y="245" width="98.1" height="15.0" fill="rgb(250,112,22)" rx="2" ry="2" />
<text  x="211.60" y="255.5" >torch/nn/fu..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,609,229 us., 13.50%)</title><rect x="48.2" y="101" width="159.3" height="15.0" fill="rgb(245,8,3)" rx="2" ry="2" />
<text  x="51.23" y="111.5" >profiling/utils.py(1..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,011,358 us., 25.26%)</title><rect x="891.9" y="197" width="298.0" height="15.0" fill="rgb(205,25,18)" rx="2" ry="2" />
<text  x="894.85" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (4,585 us., 0.04%)</title><rect x="726.6" y="229" width="0.4" height="15.0" fill="rgb(215,59,1)" rx="2" ry="2" />
<text  x="729.58" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (194,532 us., 1.63%)</title><rect x="752.1" y="85" width="19.2" height="15.0" fill="rgb(224,167,4)" rx="2" ry="2" />
<text  x="755.07" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,011,358 us., 25.26%)</title><rect x="891.9" y="181" width="298.0" height="15.0" fill="rgb(242,192,40)" rx="2" ry="2" />
<text  x="894.85" y="191.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (217,636 us., 1.83%)</title><rect x="771.3" y="229" width="21.6" height="15.0" fill="rgb(235,28,37)" rx="2" ry="2" />
<text  x="774.33" y="239.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,512 us., 0.01%)</title><rect x="726.4" y="133" width="0.2" height="15.0" fill="rgb(224,188,17)" rx="2" ry="2" />
<text  x="729.43" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (327,911 us., 2.75%)</title><rect x="308.2" y="117" width="32.5" height="15.0" fill="rgb(240,15,8)" rx="2" ry="2" />
<text  x="311.25" y="127.5" >tr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (327,911 us., 2.75%)</title><rect x="308.2" y="101" width="32.5" height="15.0" fill="rgb(205,108,20)" rx="2" ry="2" />
<text  x="311.25" y="111.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,609,229 us., 13.50%)</title><rect x="48.2" y="229" width="159.3" height="15.0" fill="rgb(208,75,43)" rx="2" ry="2" />
<text  x="51.23" y="239.5" >torch_int/nn/fused.p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (252,992 us., 2.12%)</title><rect x="727.0" y="229" width="25.1" height="15.0" fill="rgb(232,211,53)" rx="2" ry="2" />
<text  x="730.03" y="239.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (217,636 us., 1.83%)</title><rect x="771.3" y="85" width="21.6" height="15.0" fill="rgb(252,164,18)" rx="2" ry="2" />
<text  x="774.33" y="95.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,609,229 us., 13.50%)</title><rect x="48.2" y="149" width="159.3" height="15.0" fill="rgb(248,150,51)" rx="2" ry="2" />
<text  x="51.23" y="159.5" >nn.Module:_Int8OPTDe..</text>
</g>
<g >
<title>all (11,920,659 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(206,176,8)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (1,512 us., 0.01%)</title><rect x="726.4" y="229" width="0.2" height="15.0" fill="rgb(246,204,5)" rx="2" ry="2" />
<text  x="729.43" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,896,313 us., 32.69%)</title><rect x="340.7" y="181" width="385.7" height="15.0" fill="rgb(206,209,45)" rx="2" ry="2" />
<text  x="343.71" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,214 us., 0.07%)</title><rect x="891.0" y="213" width="0.9" height="15.0" fill="rgb(252,45,21)" rx="2" ry="2" />
<text  x="894.04" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (3,011,358 us., 25.26%)</title><rect x="891.9" y="261" width="298.0" height="15.0" fill="rgb(223,59,4)" rx="2" ry="2" />
<text  x="894.85" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (194,532 us., 1.63%)</title><rect x="752.1" y="197" width="19.2" height="15.0" fill="rgb(231,102,4)" rx="2" ry="2" />
<text  x="755.07" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,011,358 us., 25.26%)</title><rect x="891.9" y="117" width="298.0" height="15.0" fill="rgb(221,110,52)" rx="2" ry="2" />
<text  x="894.85" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (6,198 us., 0.05%)</title><rect x="47.5" y="197" width="0.6" height="15.0" fill="rgb(242,46,2)" rx="2" ry="2" />
<text  x="50.46" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,512 us., 0.01%)</title><rect x="726.4" y="197" width="0.2" height="15.0" fill="rgb(238,24,27)" rx="2" ry="2" />
<text  x="729.43" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,600 us., 0.01%)</title><rect x="48.1" y="197" width="0.1" height="15.0" fill="rgb(249,178,18)" rx="2" ry="2" />
<text  x="51.07" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (1,600 us., 0.01%)</title><rect x="48.1" y="245" width="0.1" height="15.0" fill="rgb(217,189,24)" rx="2" ry="2" />
<text  x="51.07" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (217,636 us., 1.83%)</title><rect x="771.3" y="117" width="21.6" height="15.0" fill="rgb(248,12,47)" rx="2" ry="2" />
<text  x="774.33" y="127.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (327,911 us., 2.75%)</title><rect x="308.2" y="213" width="32.5" height="15.0" fill="rgb(229,38,54)" rx="2" ry="2" />
<text  x="311.25" y="223.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (128,255 us., 1.08%)</title><rect x="739.4" y="181" width="12.7" height="15.0" fill="rgb(250,217,51)" rx="2" ry="2" />
<text  x="742.38" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,357 us., 0.04%)</title><rect x="208.1" y="149" width="0.5" height="15.0" fill="rgb(242,183,54)" rx="2" ry="2" />
<text  x="211.07" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B32O32LinearWithScaling (252,992 us., 2.12%)</title><rect x="727.0" y="213" width="25.1" height="15.0" fill="rgb(248,94,31)" rx="2" ry="2" />
<text  x="730.03" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (124,737 us., 1.05%)</title><rect x="727.0" y="181" width="12.4" height="15.0" fill="rgb(206,23,15)" rx="2" ry="2" />
<text  x="730.03" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,357 us., 0.04%)</title><rect x="208.1" y="165" width="0.5" height="15.0" fill="rgb(217,2,8)" rx="2" ry="2" />
<text  x="211.07" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (327,911 us., 2.75%)</title><rect x="308.2" y="197" width="32.5" height="15.0" fill="rgb(254,131,8)" rx="2" ry="2" />
<text  x="311.25" y="207.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,896,313 us., 32.69%)</title><rect x="340.7" y="229" width="385.7" height="15.0" fill="rgb(245,79,23)" rx="2" ry="2" />
<text  x="343.71" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,565 us., 0.01%)</title><rect x="890.8" y="245" width="0.2" height="15.0" fill="rgb(251,5,32)" rx="2" ry="2" />
<text  x="893.85" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fe3e4e56f00&gt; (194,532 us., 1.63%)</title><rect x="752.1" y="261" width="19.2" height="15.0" fill="rgb(250,223,45)" rx="2" ry="2" />
<text  x="755.07" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (5,520 us., 0.05%)</title><rect x="207.5" y="213" width="0.6" height="15.0" fill="rgb(231,52,17)" rx="2" ry="2" />
<text  x="210.53" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fe4d99c39c0&gt; (4,585 us., 0.04%)</title><rect x="726.6" y="261" width="0.4" height="15.0" fill="rgb(214,126,29)" rx="2" ry="2" />
<text  x="729.58" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (991,009 us., 8.31%)</title><rect x="208.6" y="101" width="98.1" height="15.0" fill="rgb(206,72,36)" rx="2" ry="2" />
<text  x="211.60" y="111.5" >nn.Module:_..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (217,636 us., 1.83%)</title><rect x="771.3" y="101" width="21.6" height="15.0" fill="rgb(249,116,33)" rx="2" ry="2" />
<text  x="774.33" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (991,009 us., 8.31%)</title><rect x="208.6" y="133" width="98.1" height="15.0" fill="rgb(239,124,49)" rx="2" ry="2" />
<text  x="211.60" y="143.5" >nn.Module:_..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (327,911 us., 2.75%)</title><rect x="308.2" y="181" width="32.5" height="15.0" fill="rgb(247,20,17)" rx="2" ry="2" />
<text  x="311.25" y="191.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (8,214 us., 0.07%)</title><rect x="891.0" y="261" width="0.9" height="15.0" fill="rgb(226,20,36)" rx="2" ry="2" />
<text  x="894.04" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (217,636 us., 1.83%)</title><rect x="771.3" y="165" width="21.6" height="15.0" fill="rgb(205,155,40)" rx="2" ry="2" />
<text  x="774.33" y="175.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (128,255 us., 1.08%)</title><rect x="739.4" y="85" width="12.7" height="15.0" fill="rgb(206,183,4)" rx="2" ry="2" />
<text  x="742.38" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (1,600 us., 0.01%)</title><rect x="48.1" y="229" width="0.1" height="15.0" fill="rgb(210,107,8)" rx="2" ry="2" />
<text  x="51.07" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (6,198 us., 0.05%)</title><rect x="47.5" y="165" width="0.6" height="15.0" fill="rgb(246,124,25)" rx="2" ry="2" />
<text  x="50.46" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,512 us., 0.01%)</title><rect x="726.4" y="245" width="0.2" height="15.0" fill="rgb(231,63,38)" rx="2" ry="2" />
<text  x="729.43" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fe4d99c39c0&gt; (10,877 us., 0.09%)</title><rect x="207.5" y="261" width="1.1" height="15.0" fill="rgb(222,32,3)" rx="2" ry="2" />
<text  x="210.53" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (128,255 us., 1.08%)</title><rect x="739.4" y="101" width="12.7" height="15.0" fill="rgb(228,48,11)" rx="2" ry="2" />
<text  x="742.38" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,896,313 us., 32.69%)</title><rect x="340.7" y="213" width="385.7" height="15.0" fill="rgb(227,214,44)" rx="2" ry="2" />
<text  x="343.71" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (11,567 us., 0.10%)</title><rect x="307.1" y="197" width="1.1" height="15.0" fill="rgb(209,175,36)" rx="2" ry="2" />
<text  x="310.10" y="207.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (10,877 us., 0.09%)</title><rect x="207.5" y="245" width="1.1" height="15.0" fill="rgb(221,98,50)" rx="2" ry="2" />
<text  x="210.53" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,600 us., 0.01%)</title><rect x="48.1" y="165" width="0.1" height="15.0" fill="rgb(216,171,48)" rx="2" ry="2" />
<text  x="51.07" y="175.5" ></text>
</g>
</g>
</svg>
