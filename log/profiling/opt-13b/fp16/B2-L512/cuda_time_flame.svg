<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>nn.Module:_OPTDecoderLayer (663,918 us., 2.23%)</title><rect x="1148.4" y="181" width="26.3" height="15.0" fill="rgb(240,79,30)" rx="2" ry="2" />
<text  x="1151.44" y="191.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (918,690 us., 3.08%)</title><rect x="974.1" y="117" width="36.4" height="15.0" fill="rgb(208,114,47)" rx="2" ry="2" />
<text  x="977.11" y="127.5" >tra..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (918,690 us., 3.08%)</title><rect x="974.1" y="149" width="36.4" height="15.0" fill="rgb(234,101,37)" rx="2" ry="2" />
<text  x="977.11" y="159.5" >tra..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,742 us., 0.02%)</title><rect x="1108.8" y="133" width="0.1" height="15.0" fill="rgb(237,181,14)" rx="2" ry="2" />
<text  x="1111.75" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (15,506,445 us., 51.99%)</title><rect x="342.7" y="85" width="613.5" height="15.0" fill="rgb(225,67,19)" rx="2" ry="2" />
<text  x="345.74" y="95.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (8,410,252 us., 28.20%)</title><rect x="10.0" y="117" width="332.7" height="15.0" fill="rgb(242,174,40)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >transformers/models/opt/modeling_opt.py(553)..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (12,501 us., 0.04%)</title><rect x="1010.5" y="197" width="0.5" height="15.0" fill="rgb(206,36,0)" rx="2" ry="2" />
<text  x="1013.54" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (918,690 us., 3.08%)</title><rect x="974.1" y="165" width="36.4" height="15.0" fill="rgb(235,38,54)" rx="2" ry="2" />
<text  x="977.11" y="175.5" >nn...</text>
</g>
<g >
<title>nn.Module:_OPTAttention (503,090 us., 1.69%)</title><rect x="1108.9" y="197" width="19.9" height="15.0" fill="rgb(223,45,21)" rx="2" ry="2" />
<text  x="1111.94" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (8,410,252 us., 28.20%)</title><rect x="10.0" y="69" width="332.7" height="15.0" fill="rgb(247,33,34)" rx="2" ry="2" />
<text  x="13.00" y="79.5" >nn.Module:_OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (15,506,445 us., 51.99%)</title><rect x="342.7" y="149" width="613.5" height="15.0" fill="rgb(225,99,42)" rx="2" ry="2" />
<text  x="345.74" y="159.5" >transformers/models/opt/modeling_opt.py(553):_forward</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (663,918 us., 2.23%)</title><rect x="1148.4" y="117" width="26.3" height="15.0" fill="rgb(234,191,11)" rx="2" ry="2" />
<text  x="1151.44" y="127.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,742 us., 0.02%)</title><rect x="1108.8" y="165" width="0.1" height="15.0" fill="rgb(237,154,13)" rx="2" ry="2" />
<text  x="1111.75" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (6,329 us., 0.02%)</title><rect x="1010.5" y="101" width="0.3" height="15.0" fill="rgb(209,156,0)" rx="2" ry="2" />
<text  x="1013.54" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (15,506,445 us., 51.99%)</title><rect x="342.7" y="69" width="613.5" height="15.0" fill="rgb(254,165,8)" rx="2" ry="2" />
<text  x="345.74" y="79.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (494,372 us., 1.66%)</title><rect x="1128.8" y="85" width="19.6" height="15.0" fill="rgb(250,117,48)" rx="2" ry="2" />
<text  x="1131.85" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (918,690 us., 3.08%)</title><rect x="974.1" y="101" width="36.4" height="15.0" fill="rgb(237,209,39)" rx="2" ry="2" />
<text  x="977.11" y="111.5" >nn...</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (381,205 us., 1.28%)</title><rect x="1174.7" y="165" width="15.1" height="15.0" fill="rgb(230,2,50)" rx="2" ry="2" />
<text  x="1177.71" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (6,172 us., 0.02%)</title><rect x="1010.8" y="69" width="0.2" height="15.0" fill="rgb(224,51,35)" rx="2" ry="2" />
<text  x="1013.79" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (381,947 us., 1.28%)</title><rect x="1093.8" y="181" width="15.1" height="15.0" fill="rgb(249,36,31)" rx="2" ry="2" />
<text  x="1096.83" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (503,090 us., 1.69%)</title><rect x="1108.9" y="133" width="19.9" height="15.0" fill="rgb(229,168,24)" rx="2" ry="2" />
<text  x="1111.94" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (8,410,252 us., 28.20%)</title><rect x="10.0" y="101" width="332.7" height="15.0" fill="rgb(242,203,5)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >nn.Module:_OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,074 us., 0.01%)</title><rect x="1093.6" y="165" width="0.2" height="15.0" fill="rgb(224,179,28)" rx="2" ry="2" />
<text  x="1096.59" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (756,638 us., 2.54%)</title><rect x="1011.0" y="53" width="30.0" height="15.0" fill="rgb(248,186,39)" rx="2" ry="2" />
<text  x="1014.03" y="63.5" >to..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (494,372 us., 1.66%)</title><rect x="1128.8" y="165" width="19.6" height="15.0" fill="rgb(229,185,50)" rx="2" ry="2" />
<text  x="1131.85" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (381,205 us., 1.28%)</title><rect x="1174.7" y="213" width="15.1" height="15.0" fill="rgb(232,156,15)" rx="2" ry="2" />
<text  x="1177.71" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (24,369,009 us., 81.70%)</title><rect x="10.0" y="197" width="964.1" height="15.0" fill="rgb(251,172,50)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Module:_Linear</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (443,145 us., 1.49%)</title><rect x="1041.0" y="85" width="17.5" height="15.0" fill="rgb(216,127,12)" rx="2" ry="2" />
<text  x="1043.98" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (15,506,445 us., 51.99%)</title><rect x="342.7" y="165" width="613.5" height="15.0" fill="rgb(206,205,20)" rx="2" ry="2" />
<text  x="345.74" y="175.5" >nn.Module:_OPTDecoderLayer</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (452,312 us., 1.52%)</title><rect x="956.2" y="133" width="17.9" height="15.0" fill="rgb(225,3,37)" rx="2" ry="2" />
<text  x="959.22" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (6,172 us., 0.02%)</title><rect x="1010.8" y="165" width="0.2" height="15.0" fill="rgb(237,147,17)" rx="2" ry="2" />
<text  x="1013.79" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_relu_of_type_object_at_0x7f308e9069c0&gt; (494,372 us., 1.66%)</title><rect x="1128.8" y="229" width="19.6" height="15.0" fill="rgb(210,158,53)" rx="2" ry="2" />
<text  x="1131.85" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (15,506,445 us., 51.99%)</title><rect x="342.7" y="101" width="613.5" height="15.0" fill="rgb(226,19,38)" rx="2" ry="2" />
<text  x="345.74" y="111.5" >nn.Module:_OPTForCausalLM</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f308e9069c0&gt; (12,501 us., 0.04%)</title><rect x="1010.5" y="229" width="0.5" height="15.0" fill="rgb(240,70,38)" rx="2" ry="2" />
<text  x="1013.54" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (756,638 us., 2.54%)</title><rect x="1011.0" y="149" width="30.0" height="15.0" fill="rgb(252,184,19)" rx="2" ry="2" />
<text  x="1014.03" y="159.5" >nn..</text>
</g>
<g >
<title>nn.Module:_OPTAttention (8,410,252 us., 28.20%)</title><rect x="10.0" y="165" width="332.7" height="15.0" fill="rgb(254,128,43)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >nn.Module:_OPTAttention</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (6,172 us., 0.02%)</title><rect x="1010.8" y="117" width="0.2" height="15.0" fill="rgb(253,220,3)" rx="2" ry="2" />
<text  x="1013.79" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,074 us., 0.01%)</title><rect x="1093.6" y="133" width="0.2" height="15.0" fill="rgb(233,100,43)" rx="2" ry="2" />
<text  x="1096.59" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f308e9069c0&gt; (381,947 us., 1.28%)</title><rect x="1093.8" y="229" width="15.1" height="15.0" fill="rgb(230,156,43)" rx="2" ry="2" />
<text  x="1096.83" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (24,369,009 us., 81.70%)</title><rect x="10.0" y="229" width="964.1" height="15.0" fill="rgb(212,99,44)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >&lt;built-in_function_linear&gt;</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (503,090 us., 1.69%)</title><rect x="1108.9" y="85" width="19.9" height="15.0" fill="rgb(211,76,47)" rx="2" ry="2" />
<text  x="1111.94" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,074 us., 0.01%)</title><rect x="1093.6" y="117" width="0.2" height="15.0" fill="rgb(213,163,33)" rx="2" ry="2" />
<text  x="1096.59" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (663,918 us., 2.23%)</title><rect x="1148.4" y="229" width="26.3" height="15.0" fill="rgb(212,61,14)" rx="2" ry="2" />
<text  x="1151.44" y="239.5" >t..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (24,369,009 us., 81.70%)</title><rect x="10.0" y="213" width="964.1" height="15.0" fill="rgb(224,129,3)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >torch/nn/modules/linear.py(113):_forward</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (886,660 us., 2.97%)</title><rect x="1058.5" y="165" width="35.1" height="15.0" fill="rgb(220,45,44)" rx="2" ry="2" />
<text  x="1061.51" y="175.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (6,172 us., 0.02%)</title><rect x="1010.8" y="181" width="0.2" height="15.0" fill="rgb(235,116,27)" rx="2" ry="2" />
<text  x="1013.79" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (918,690 us., 3.08%)</title><rect x="974.1" y="213" width="36.4" height="15.0" fill="rgb(244,51,15)" rx="2" ry="2" />
<text  x="977.11" y="223.5" >tra..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (918,690 us., 3.08%)</title><rect x="974.1" y="69" width="36.4" height="15.0" fill="rgb(231,197,11)" rx="2" ry="2" />
<text  x="977.11" y="79.5" >tor..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (377,205 us., 1.26%)</title><rect x="1093.8" y="101" width="15.0" height="15.0" fill="rgb(231,149,25)" rx="2" ry="2" />
<text  x="1096.83" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (663,918 us., 2.23%)</title><rect x="1148.4" y="197" width="26.3" height="15.0" fill="rgb(233,14,53)" rx="2" ry="2" />
<text  x="1151.44" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (503,090 us., 1.69%)</title><rect x="1108.9" y="101" width="19.9" height="15.0" fill="rgb(205,26,1)" rx="2" ry="2" />
<text  x="1111.94" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (663,918 us., 2.23%)</title><rect x="1148.4" y="133" width="26.3" height="15.0" fill="rgb(227,216,33)" rx="2" ry="2" />
<text  x="1151.44" y="143.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (377,205 us., 1.26%)</title><rect x="1093.8" y="149" width="15.0" height="15.0" fill="rgb(252,157,34)" rx="2" ry="2" />
<text  x="1096.83" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,410,252 us., 28.20%)</title><rect x="10.0" y="53" width="332.7" height="15.0" fill="rgb(247,100,1)" rx="2" ry="2" />
<text  x="13.00" y="63.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (494,372 us., 1.66%)</title><rect x="1128.8" y="133" width="19.6" height="15.0" fill="rgb(233,15,31)" rx="2" ry="2" />
<text  x="1131.85" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,742 us., 0.02%)</title><rect x="1108.8" y="101" width="0.1" height="15.0" fill="rgb(241,25,28)" rx="2" ry="2" />
<text  x="1111.75" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (886,660 us., 2.97%)</title><rect x="1058.5" y="85" width="35.1" height="15.0" fill="rgb(207,34,5)" rx="2" ry="2" />
<text  x="1061.51" y="95.5" >pr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (503,090 us., 1.69%)</title><rect x="1108.9" y="149" width="19.9" height="15.0" fill="rgb(242,174,22)" rx="2" ry="2" />
<text  x="1111.94" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (6,329 us., 0.02%)</title><rect x="1010.5" y="133" width="0.3" height="15.0" fill="rgb(214,82,1)" rx="2" ry="2" />
<text  x="1013.54" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (443,145 us., 1.49%)</title><rect x="1041.0" y="53" width="17.5" height="15.0" fill="rgb(218,176,37)" rx="2" ry="2" />
<text  x="1043.98" y="63.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (381,947 us., 1.28%)</title><rect x="1093.8" y="213" width="15.1" height="15.0" fill="rgb(212,118,4)" rx="2" ry="2" />
<text  x="1096.83" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_ReLU (494,372 us., 1.66%)</title><rect x="1128.8" y="181" width="19.6" height="15.0" fill="rgb(254,82,44)" rx="2" ry="2" />
<text  x="1131.85" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,074 us., 0.01%)</title><rect x="1093.6" y="197" width="0.2" height="15.0" fill="rgb(238,72,8)" rx="2" ry="2" />
<text  x="1096.59" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (381,205 us., 1.28%)</title><rect x="1174.7" y="133" width="15.1" height="15.0" fill="rgb(246,53,29)" rx="2" ry="2" />
<text  x="1177.71" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (886,660 us., 2.97%)</title><rect x="1058.5" y="101" width="35.1" height="15.0" fill="rgb(238,38,43)" rx="2" ry="2" />
<text  x="1061.51" y="111.5" >nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (918,690 us., 3.08%)</title><rect x="974.1" y="85" width="36.4" height="15.0" fill="rgb(212,101,41)" rx="2" ry="2" />
<text  x="977.11" y="95.5" >pro..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (443,145 us., 1.49%)</title><rect x="1041.0" y="117" width="17.5" height="15.0" fill="rgb(212,143,3)" rx="2" ry="2" />
<text  x="1043.98" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (381,205 us., 1.28%)</title><rect x="1174.7" y="149" width="15.1" height="15.0" fill="rgb(232,158,51)" rx="2" ry="2" />
<text  x="1177.71" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (381,205 us., 1.28%)</title><rect x="1174.7" y="181" width="15.1" height="15.0" fill="rgb(210,161,28)" rx="2" ry="2" />
<text  x="1177.71" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (886,660 us., 2.97%)</title><rect x="1058.5" y="117" width="35.1" height="15.0" fill="rgb(235,225,14)" rx="2" ry="2" />
<text  x="1061.51" y="127.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTAttention (443,145 us., 1.49%)</title><rect x="1041.0" y="181" width="17.5" height="15.0" fill="rgb(254,46,35)" rx="2" ry="2" />
<text  x="1043.98" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (6,172 us., 0.02%)</title><rect x="1010.8" y="101" width="0.2" height="15.0" fill="rgb(244,45,10)" rx="2" ry="2" />
<text  x="1013.79" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (494,372 us., 1.66%)</title><rect x="1128.8" y="53" width="19.6" height="15.0" fill="rgb(233,164,34)" rx="2" ry="2" />
<text  x="1131.85" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_OPTAttention (918,690 us., 3.08%)</title><rect x="974.1" y="197" width="36.4" height="15.0" fill="rgb(223,135,42)" rx="2" ry="2" />
<text  x="977.11" y="207.5" >nn...</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,742 us., 0.02%)</title><rect x="1108.8" y="85" width="0.1" height="15.0" fill="rgb(240,174,46)" rx="2" ry="2" />
<text  x="1111.75" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (918,690 us., 3.08%)</title><rect x="974.1" y="133" width="36.4" height="15.0" fill="rgb(219,146,33)" rx="2" ry="2" />
<text  x="977.11" y="143.5" >nn...</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (443,145 us., 1.49%)</title><rect x="1041.0" y="149" width="17.5" height="15.0" fill="rgb(210,156,33)" rx="2" ry="2" />
<text  x="1043.98" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (443,145 us., 1.49%)</title><rect x="1041.0" y="133" width="17.5" height="15.0" fill="rgb(226,43,3)" rx="2" ry="2" />
<text  x="1043.98" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (494,372 us., 1.66%)</title><rect x="1128.8" y="101" width="19.6" height="15.0" fill="rgb(233,136,34)" rx="2" ry="2" />
<text  x="1131.85" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (377,205 us., 1.26%)</title><rect x="1093.8" y="53" width="15.0" height="15.0" fill="rgb(233,121,28)" rx="2" ry="2" />
<text  x="1096.83" y="63.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (443,145 us., 1.49%)</title><rect x="1041.0" y="165" width="17.5" height="15.0" fill="rgb(229,189,51)" rx="2" ry="2" />
<text  x="1043.98" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (663,918 us., 2.23%)</title><rect x="1148.4" y="101" width="26.3" height="15.0" fill="rgb(208,135,23)" rx="2" ry="2" />
<text  x="1151.44" y="111.5" >p..</text>
</g>
<g >
<title>torch/nn/modules/activation.py(97):_forward (494,372 us., 1.66%)</title><rect x="1128.8" y="197" width="19.6" height="15.0" fill="rgb(220,75,39)" rx="2" ry="2" />
<text  x="1131.85" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (6,329 us., 0.02%)</title><rect x="1010.5" y="165" width="0.3" height="15.0" fill="rgb(234,212,17)" rx="2" ry="2" />
<text  x="1013.54" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (6,329 us., 0.02%)</title><rect x="1010.5" y="181" width="0.3" height="15.0" fill="rgb(246,215,1)" rx="2" ry="2" />
<text  x="1013.54" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (503,090 us., 1.69%)</title><rect x="1108.9" y="181" width="19.9" height="15.0" fill="rgb(206,201,7)" rx="2" ry="2" />
<text  x="1111.94" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTAttention (663,918 us., 2.23%)</title><rect x="1148.4" y="213" width="26.3" height="15.0" fill="rgb(215,154,35)" rx="2" ry="2" />
<text  x="1151.44" y="223.5" >n..</text>
</g>
<g >
<title>all (29,825,791 us., 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(216,8,31)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (15,506,445 us., 51.99%)</title><rect x="342.7" y="181" width="613.5" height="15.0" fill="rgb(246,223,24)" rx="2" ry="2" />
<text  x="345.74" y="191.5" >transformers/models/opt/modeling_opt.py(298):_forward</text>
</g>
<g >
<title>nn.Module:_OPTAttention (756,638 us., 2.54%)</title><rect x="1011.0" y="181" width="30.0" height="15.0" fill="rgb(214,2,13)" rx="2" ry="2" />
<text  x="1014.03" y="191.5" >nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (443,145 us., 1.49%)</title><rect x="1041.0" y="69" width="17.5" height="15.0" fill="rgb(209,134,50)" rx="2" ry="2" />
<text  x="1043.98" y="79.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (381,205 us., 1.28%)</title><rect x="1174.7" y="117" width="15.1" height="15.0" fill="rgb(223,211,39)" rx="2" ry="2" />
<text  x="1177.71" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f2f9a3fc450&gt; (2,092,731 us., 7.02%)</title><rect x="1011.0" y="229" width="82.8" height="15.0" fill="rgb(210,197,8)" rx="2" ry="2" />
<text  x="1014.03" y="239.5" >&lt;built-in..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (756,638 us., 2.54%)</title><rect x="1011.0" y="69" width="30.0" height="15.0" fill="rgb(243,65,6)" rx="2" ry="2" />
<text  x="1014.03" y="79.5" >pr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (443,145 us., 1.49%)</title><rect x="1041.0" y="197" width="17.5" height="15.0" fill="rgb(250,74,42)" rx="2" ry="2" />
<text  x="1043.98" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (503,090 us., 1.69%)</title><rect x="1108.9" y="69" width="19.9" height="15.0" fill="rgb(222,153,8)" rx="2" ry="2" />
<text  x="1111.94" y="79.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,410,252 us., 28.20%)</title><rect x="10.0" y="85" width="332.7" height="15.0" fill="rgb(225,95,34)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >transformers/models/opt/modeling_opt.py(840)..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (15,506,445 us., 51.99%)</title><rect x="342.7" y="117" width="613.5" height="15.0" fill="rgb(247,73,27)" rx="2" ry="2" />
<text  x="345.74" y="127.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,835 us., 0.02%)</title><rect x="1189.8" y="181" width="0.2" height="15.0" fill="rgb(236,164,51)" rx="2" ry="2" />
<text  x="1192.81" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (756,638 us., 2.54%)</title><rect x="1011.0" y="101" width="30.0" height="15.0" fill="rgb(205,25,30)" rx="2" ry="2" />
<text  x="1014.03" y="111.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (756,638 us., 2.54%)</title><rect x="1011.0" y="133" width="30.0" height="15.0" fill="rgb(241,219,10)" rx="2" ry="2" />
<text  x="1014.03" y="143.5" >tr..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (6,329 us., 0.02%)</title><rect x="1010.5" y="85" width="0.3" height="15.0" fill="rgb(205,107,5)" rx="2" ry="2" />
<text  x="1013.54" y="95.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (381,947 us., 1.28%)</title><rect x="1093.8" y="197" width="15.1" height="15.0" fill="rgb(253,130,45)" rx="2" ry="2" />
<text  x="1096.83" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,742 us., 0.02%)</title><rect x="1108.8" y="149" width="0.1" height="15.0" fill="rgb(245,41,29)" rx="2" ry="2" />
<text  x="1111.75" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (6,329 us., 0.02%)</title><rect x="1010.5" y="117" width="0.3" height="15.0" fill="rgb(235,27,1)" rx="2" ry="2" />
<text  x="1013.54" y="127.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1446):_relu (494,372 us., 1.66%)</title><rect x="1128.8" y="213" width="19.6" height="15.0" fill="rgb(245,88,52)" rx="2" ry="2" />
<text  x="1131.85" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (452,312 us., 1.52%)</title><rect x="956.2" y="181" width="17.9" height="15.0" fill="rgb(237,9,27)" rx="2" ry="2" />
<text  x="959.22" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,835 us., 0.02%)</title><rect x="1189.8" y="213" width="0.2" height="15.0" fill="rgb(249,151,42)" rx="2" ry="2" />
<text  x="1192.81" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (663,918 us., 2.23%)</title><rect x="1148.4" y="85" width="26.3" height="15.0" fill="rgb(254,121,25)" rx="2" ry="2" />
<text  x="1151.44" y="95.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (756,638 us., 2.54%)</title><rect x="1011.0" y="197" width="30.0" height="15.0" fill="rgb(219,141,47)" rx="2" ry="2" />
<text  x="1014.03" y="207.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (6,172 us., 0.02%)</title><rect x="1010.8" y="149" width="0.2" height="15.0" fill="rgb(215,57,41)" rx="2" ry="2" />
<text  x="1013.79" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (756,638 us., 2.54%)</title><rect x="1011.0" y="117" width="30.0" height="15.0" fill="rgb(216,163,23)" rx="2" ry="2" />
<text  x="1014.03" y="127.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (503,090 us., 1.69%)</title><rect x="1108.9" y="117" width="19.9" height="15.0" fill="rgb(218,49,7)" rx="2" ry="2" />
<text  x="1111.94" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTAttention (886,660 us., 2.97%)</title><rect x="1058.5" y="197" width="35.1" height="15.0" fill="rgb(224,163,6)" rx="2" ry="2" />
<text  x="1061.51" y="207.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (443,145 us., 1.49%)</title><rect x="1041.0" y="101" width="17.5" height="15.0" fill="rgb(243,200,26)" rx="2" ry="2" />
<text  x="1043.98" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (756,638 us., 2.54%)</title><rect x="1011.0" y="213" width="30.0" height="15.0" fill="rgb(241,213,27)" rx="2" ry="2" />
<text  x="1014.03" y="223.5" >to..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (494,372 us., 1.66%)</title><rect x="1128.8" y="117" width="19.6" height="15.0" fill="rgb(249,108,0)" rx="2" ry="2" />
<text  x="1131.85" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (8,410,252 us., 28.20%)</title><rect x="10.0" y="133" width="332.7" height="15.0" fill="rgb(247,78,13)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >nn.Module:_OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (886,660 us., 2.97%)</title><rect x="1058.5" y="181" width="35.1" height="15.0" fill="rgb(217,215,52)" rx="2" ry="2" />
<text  x="1061.51" y="191.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,074 us., 0.01%)</title><rect x="1093.6" y="149" width="0.2" height="15.0" fill="rgb(236,159,14)" rx="2" ry="2" />
<text  x="1096.59" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (6,329 us., 0.02%)</title><rect x="1010.5" y="149" width="0.3" height="15.0" fill="rgb(216,10,4)" rx="2" ry="2" />
<text  x="1013.54" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (886,660 us., 2.97%)</title><rect x="1058.5" y="133" width="35.1" height="15.0" fill="rgb(213,181,16)" rx="2" ry="2" />
<text  x="1061.51" y="143.5" >nn..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (15,506,445 us., 51.99%)</title><rect x="342.7" y="133" width="613.5" height="15.0" fill="rgb(225,126,32)" rx="2" ry="2" />
<text  x="345.74" y="143.5" >nn.Module:_OPTDecoder</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (12,501 us., 0.04%)</title><rect x="1010.5" y="213" width="0.5" height="15.0" fill="rgb(252,97,54)" rx="2" ry="2" />
<text  x="1013.54" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (8,410,252 us., 28.20%)</title><rect x="10.0" y="181" width="332.7" height="15.0" fill="rgb(250,37,19)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >transformers/models/opt/modeling_opt.py(160)..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(157):__shape (443,145 us., 1.49%)</title><rect x="1041.0" y="213" width="17.5" height="15.0" fill="rgb(219,129,21)" rx="2" ry="2" />
<text  x="1043.98" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (452,312 us., 1.52%)</title><rect x="956.2" y="165" width="17.9" height="15.0" fill="rgb(253,198,48)" rx="2" ry="2" />
<text  x="959.22" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (377,205 us., 1.26%)</title><rect x="1093.8" y="165" width="15.0" height="15.0" fill="rgb(221,139,26)" rx="2" ry="2" />
<text  x="1096.83" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (503,090 us., 1.69%)</title><rect x="1108.9" y="165" width="19.9" height="15.0" fill="rgb(206,142,10)" rx="2" ry="2" />
<text  x="1111.94" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (886,660 us., 2.97%)</title><rect x="1058.5" y="213" width="35.1" height="15.0" fill="rgb(214,134,40)" rx="2" ry="2" />
<text  x="1061.51" y="223.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (8,410,252 us., 28.20%)</title><rect x="10.0" y="149" width="332.7" height="15.0" fill="rgb(243,50,27)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >transformers/models/opt/modeling_opt.py(298)..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (452,312 us., 1.52%)</title><rect x="956.2" y="149" width="17.9" height="15.0" fill="rgb(247,118,27)" rx="2" ry="2" />
<text  x="959.22" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (756,638 us., 2.54%)</title><rect x="1011.0" y="85" width="30.0" height="15.0" fill="rgb(209,119,5)" rx="2" ry="2" />
<text  x="1014.03" y="95.5" >nn..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (6,172 us., 0.02%)</title><rect x="1010.8" y="133" width="0.2" height="15.0" fill="rgb(216,14,15)" rx="2" ry="2" />
<text  x="1013.79" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,835 us., 0.02%)</title><rect x="1189.8" y="165" width="0.2" height="15.0" fill="rgb(234,95,25)" rx="2" ry="2" />
<text  x="1192.81" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (377,205 us., 1.26%)</title><rect x="1093.8" y="85" width="15.0" height="15.0" fill="rgb(241,16,1)" rx="2" ry="2" />
<text  x="1096.83" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (663,918 us., 2.23%)</title><rect x="1148.4" y="165" width="26.3" height="15.0" fill="rgb(208,220,46)" rx="2" ry="2" />
<text  x="1151.44" y="175.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (503,090 us., 1.69%)</title><rect x="1108.9" y="213" width="19.9" height="15.0" fill="rgb(242,204,9)" rx="2" ry="2" />
<text  x="1111.94" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (756,638 us., 2.54%)</title><rect x="1011.0" y="165" width="30.0" height="15.0" fill="rgb(222,125,17)" rx="2" ry="2" />
<text  x="1014.03" y="175.5" >tr..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (6,172 us., 0.02%)</title><rect x="1010.8" y="85" width="0.2" height="15.0" fill="rgb(238,40,7)" rx="2" ry="2" />
<text  x="1013.79" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (886,660 us., 2.97%)</title><rect x="1058.5" y="69" width="35.1" height="15.0" fill="rgb(243,215,16)" rx="2" ry="2" />
<text  x="1061.51" y="79.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,835 us., 0.02%)</title><rect x="1189.8" y="149" width="0.2" height="15.0" fill="rgb(243,109,32)" rx="2" ry="2" />
<text  x="1192.81" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (381,205 us., 1.28%)</title><rect x="1174.7" y="229" width="15.1" height="15.0" fill="rgb(234,89,45)" rx="2" ry="2" />
<text  x="1177.71" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,835 us., 0.02%)</title><rect x="1189.8" y="197" width="0.2" height="15.0" fill="rgb(231,135,25)" rx="2" ry="2" />
<text  x="1192.81" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (886,660 us., 2.97%)</title><rect x="1058.5" y="149" width="35.1" height="15.0" fill="rgb(242,170,34)" rx="2" ry="2" />
<text  x="1061.51" y="159.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,835 us., 0.02%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(242,27,29)" rx="2" ry="2" />
<text  x="1192.81" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (377,205 us., 1.26%)</title><rect x="1093.8" y="117" width="15.0" height="15.0" fill="rgb(218,148,52)" rx="2" ry="2" />
<text  x="1096.83" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (377,205 us., 1.26%)</title><rect x="1093.8" y="69" width="15.0" height="15.0" fill="rgb(221,107,3)" rx="2" ry="2" />
<text  x="1096.83" y="79.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,410,252 us., 28.20%)</title><rect x="10.0" y="37" width="332.7" height="15.0" fill="rgb(230,88,19)" rx="2" ry="2" />
<text  x="13.00" y="47.5" >torch/autograd/grad_mode.py(27):_decorate_co..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,074 us., 0.01%)</title><rect x="1093.6" y="181" width="0.2" height="15.0" fill="rgb(245,47,2)" rx="2" ry="2" />
<text  x="1096.59" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f308e9069c0&gt; (503,090 us., 1.69%)</title><rect x="1108.9" y="229" width="19.9" height="15.0" fill="rgb(232,229,27)" rx="2" ry="2" />
<text  x="1111.94" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (381,205 us., 1.28%)</title><rect x="1174.7" y="197" width="15.1" height="15.0" fill="rgb(205,201,4)" rx="2" ry="2" />
<text  x="1177.71" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_method_bmm_of_type_object_at_0x7f308e9069c0&gt; (918,690 us., 3.08%)</title><rect x="974.1" y="229" width="36.4" height="15.0" fill="rgb(241,19,24)" rx="2" ry="2" />
<text  x="977.11" y="239.5" >&lt;bu..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(533):__prepare_decoder_attention_mask (4,074 us., 0.01%)</title><rect x="1093.6" y="213" width="0.2" height="15.0" fill="rgb(242,210,45)" rx="2" ry="2" />
<text  x="1096.59" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (377,205 us., 1.26%)</title><rect x="1093.8" y="133" width="15.0" height="15.0" fill="rgb(242,25,19)" rx="2" ry="2" />
<text  x="1096.83" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (918,690 us., 3.08%)</title><rect x="974.1" y="181" width="36.4" height="15.0" fill="rgb(208,15,51)" rx="2" ry="2" />
<text  x="977.11" y="191.5" >tra..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (494,372 us., 1.66%)</title><rect x="1128.8" y="69" width="19.6" height="15.0" fill="rgb(229,32,40)" rx="2" ry="2" />
<text  x="1131.85" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (494,372 us., 1.66%)</title><rect x="1128.8" y="149" width="19.6" height="15.0" fill="rgb(233,121,31)" rx="2" ry="2" />
<text  x="1131.85" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (663,918 us., 2.23%)</title><rect x="1148.4" y="149" width="26.3" height="15.0" fill="rgb(254,34,23)" rx="2" ry="2" />
<text  x="1151.44" y="159.5" >n..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,742 us., 0.02%)</title><rect x="1108.8" y="117" width="0.1" height="15.0" fill="rgb(245,68,35)" rx="2" ry="2" />
<text  x="1111.75" y="127.5" ></text>
</g>
</g>
</svg>
