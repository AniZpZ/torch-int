<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>nn.Module:_OPTAttention (571,614 us., 3.40%)</title><rect x="1042.0" y="197" width="40.1" height="15.0" fill="rgb(253,54,31)" rx="2" ry="2" />
<text  x="1044.97" y="207.5" >nn...</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (419,985 us., 2.50%)</title><rect x="1143.8" y="133" width="29.4" height="15.0" fill="rgb(208,158,6)" rx="2" ry="2" />
<text  x="1146.75" y="143.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (323,541 us., 1.92%)</title><rect x="1098.6" y="133" width="22.7" height="15.0" fill="rgb(241,125,54)" rx="2" ry="2" />
<text  x="1101.58" y="143.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (323,541 us., 1.92%)</title><rect x="1098.6" y="149" width="22.7" height="15.0" fill="rgb(233,199,11)" rx="2" ry="2" />
<text  x="1101.58" y="159.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (1,946 us., 0.01%)</title><rect x="987.3" y="197" width="0.1" height="15.0" fill="rgb(212,49,25)" rx="2" ry="2" />
<text  x="990.25" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,516 us., 0.02%)</title><rect x="1098.3" y="85" width="0.3" height="15.0" fill="rgb(237,174,39)" rx="2" ry="2" />
<text  x="1101.34" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (487,677 us., 2.90%)</title><rect x="988.1" y="133" width="34.2" height="15.0" fill="rgb(240,4,29)" rx="2" ry="2" />
<text  x="991.10" y="143.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTAttention (419,985 us., 2.50%)</title><rect x="1143.8" y="213" width="29.4" height="15.0" fill="rgb(215,19,12)" rx="2" ry="2" />
<text  x="1146.75" y="223.5" >nn..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f9842143450&gt; (1,344,855 us., 8.00%)</title><rect x="988.1" y="229" width="94.4" height="15.0" fill="rgb(235,120,12)" rx="2" ry="2" />
<text  x="991.10" y="239.5" >&lt;built-in_m..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (318,805 us., 1.90%)</title><rect x="1121.3" y="165" width="22.4" height="15.0" fill="rgb(216,206,2)" rx="2" ry="2" />
<text  x="1124.31" y="175.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (620,414 us., 3.69%)</title><rect x="943.7" y="85" width="43.6" height="15.0" fill="rgb(224,229,12)" rx="2" ry="2" />
<text  x="946.70" y="95.5" >prof..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (3,922 us., 0.02%)</title><rect x="1189.7" y="213" width="0.3" height="15.0" fill="rgb(248,102,26)" rx="2" ry="2" />
<text  x="1192.72" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (318,805 us., 1.90%)</title><rect x="1121.3" y="133" width="22.4" height="15.0" fill="rgb(229,8,44)" rx="2" ry="2" />
<text  x="1124.31" y="143.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,800 us., 0.01%)</title><rect x="1082.4" y="213" width="0.1" height="15.0" fill="rgb(233,192,33)" rx="2" ry="2" />
<text  x="1085.38" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,024 us., 0.02%)</title><rect x="1082.1" y="197" width="0.3" height="15.0" fill="rgb(216,95,3)" rx="2" ry="2" />
<text  x="1085.09" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (7,990,321 us., 47.53%)</title><rect x="357.5" y="101" width="560.9" height="15.0" fill="rgb(247,109,2)" rx="2" ry="2" />
<text  x="360.47" y="111.5" >nn.Module:_OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,516 us., 0.02%)</title><rect x="1098.3" y="133" width="0.3" height="15.0" fill="rgb(228,15,22)" rx="2" ry="2" />
<text  x="1101.34" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,949,969 us., 29.45%)</title><rect x="10.0" y="37" width="347.5" height="15.0" fill="rgb(250,81,48)" rx="2" ry="2" />
<text  x="13.00" y="47.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (571,614 us., 3.40%)</title><rect x="1042.0" y="213" width="40.1" height="15.0" fill="rgb(209,23,18)" rx="2" ry="2" />
<text  x="1044.97" y="223.5" >tra..</text>
</g>
<g >
<title>nn.Module:_LayerNorm (229,110 us., 1.36%)</title><rect x="1082.5" y="181" width="16.1" height="15.0" fill="rgb(212,188,31)" rx="2" ry="2" />
<text  x="1085.50" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (318,805 us., 1.90%)</title><rect x="1121.3" y="149" width="22.4" height="15.0" fill="rgb(248,75,38)" rx="2" ry="2" />
<text  x="1124.31" y="159.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (1,946 us., 0.01%)</title><rect x="987.3" y="181" width="0.1" height="15.0" fill="rgb(217,52,53)" rx="2" ry="2" />
<text  x="990.25" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,949,969 us., 29.45%)</title><rect x="10.0" y="101" width="347.5" height="15.0" fill="rgb(236,113,35)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >nn.Module:_OPTDecoder</text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7f993664d9c0&gt; (1,946 us., 0.01%)</title><rect x="987.3" y="229" width="0.1" height="15.0" fill="rgb(243,46,4)" rx="2" ry="2" />
<text  x="990.25" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (323,541 us., 1.92%)</title><rect x="1098.6" y="165" width="22.7" height="15.0" fill="rgb(227,110,0)" rx="2" ry="2" />
<text  x="1101.58" y="175.5" >n..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (419,985 us., 2.50%)</title><rect x="1143.8" y="149" width="29.4" height="15.0" fill="rgb(252,226,14)" rx="2" ry="2" />
<text  x="1146.75" y="159.5" >nn..</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (487,677 us., 2.90%)</title><rect x="988.1" y="149" width="34.2" height="15.0" fill="rgb(249,42,41)" rx="2" ry="2" />
<text  x="991.10" y="159.5" >nn..</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (4,949,969 us., 29.45%)</title><rect x="10.0" y="133" width="347.5" height="15.0" fill="rgb(210,66,35)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >nn.Module:_OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Linear (13,301,390 us., 79.13%)</title><rect x="10.0" y="197" width="933.7" height="15.0" fill="rgb(238,117,47)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Module:_Linear</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (5,139 us., 0.03%)</title><rect x="987.4" y="149" width="0.4" height="15.0" fill="rgb(231,25,52)" rx="2" ry="2" />
<text  x="990.39" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (225,594 us., 1.34%)</title><rect x="1082.5" y="133" width="15.8" height="15.0" fill="rgb(227,122,1)" rx="2" ry="2" />
<text  x="1085.50" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (234,515 us., 1.40%)</title><rect x="1173.2" y="149" width="16.5" height="15.0" fill="rgb(232,104,2)" rx="2" ry="2" />
<text  x="1176.23" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (1,946 us., 0.01%)</title><rect x="987.3" y="133" width="0.1" height="15.0" fill="rgb(241,77,37)" rx="2" ry="2" />
<text  x="990.25" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (279,345 us., 1.66%)</title><rect x="1022.4" y="117" width="19.6" height="15.0" fill="rgb(245,135,19)" rx="2" ry="2" />
<text  x="1025.36" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (487,677 us., 2.90%)</title><rect x="988.1" y="165" width="34.2" height="15.0" fill="rgb(228,212,49)" rx="2" ry="2" />
<text  x="991.10" y="175.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (3,516 us., 0.02%)</title><rect x="1098.3" y="165" width="0.3" height="15.0" fill="rgb(245,159,0)" rx="2" ry="2" />
<text  x="1101.34" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(157):__shape (279,345 us., 1.66%)</title><rect x="1022.4" y="213" width="19.6" height="15.0" fill="rgb(219,197,27)" rx="2" ry="2" />
<text  x="1025.36" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,990,321 us., 47.53%)</title><rect x="357.5" y="69" width="560.9" height="15.0" fill="rgb(239,188,49)" rx="2" ry="2" />
<text  x="360.47" y="79.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,990,321 us., 47.53%)</title><rect x="357.5" y="117" width="560.9" height="15.0" fill="rgb(206,141,42)" rx="2" ry="2" />
<text  x="360.47" y="127.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (620,414 us., 3.69%)</title><rect x="943.7" y="133" width="43.6" height="15.0" fill="rgb(218,12,20)" rx="2" ry="2" />
<text  x="946.70" y="143.5" >nn.M..</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (229,110 us., 1.36%)</title><rect x="1082.5" y="197" width="16.1" height="15.0" fill="rgb(207,133,2)" rx="2" ry="2" />
<text  x="1085.50" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (279,345 us., 1.66%)</title><rect x="1022.4" y="133" width="19.6" height="15.0" fill="rgb(250,188,29)" rx="2" ry="2" />
<text  x="1025.36" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (419,985 us., 2.50%)</title><rect x="1143.8" y="85" width="29.4" height="15.0" fill="rgb(206,36,53)" rx="2" ry="2" />
<text  x="1146.75" y="95.5" >to..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (620,414 us., 3.69%)</title><rect x="943.7" y="149" width="43.6" height="15.0" fill="rgb(221,115,48)" rx="2" ry="2" />
<text  x="946.70" y="159.5" >tran..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (419,985 us., 2.50%)</title><rect x="1143.8" y="101" width="29.4" height="15.0" fill="rgb(206,169,40)" rx="2" ry="2" />
<text  x="1146.75" y="111.5" >pr..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (620,414 us., 3.69%)</title><rect x="943.7" y="69" width="43.6" height="15.0" fill="rgb(205,51,53)" rx="2" ry="2" />
<text  x="946.70" y="79.5" >torc..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (487,677 us., 2.90%)</title><rect x="988.1" y="101" width="34.2" height="15.0" fill="rgb(243,60,2)" rx="2" ry="2" />
<text  x="991.10" y="111.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (620,414 us., 3.69%)</title><rect x="943.7" y="101" width="43.6" height="15.0" fill="rgb(221,132,48)" rx="2" ry="2" />
<text  x="946.70" y="111.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,946 us., 0.03%)</title><rect x="987.8" y="101" width="0.3" height="15.0" fill="rgb(217,20,1)" rx="2" ry="2" />
<text  x="990.75" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,946 us., 0.03%)</title><rect x="987.8" y="117" width="0.3" height="15.0" fill="rgb(225,43,34)" rx="2" ry="2" />
<text  x="990.75" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_ReLU (318,805 us., 1.90%)</title><rect x="1121.3" y="181" width="22.4" height="15.0" fill="rgb(206,204,41)" rx="2" ry="2" />
<text  x="1124.31" y="191.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,946 us., 0.03%)</title><rect x="987.8" y="149" width="0.3" height="15.0" fill="rgb(232,102,45)" rx="2" ry="2" />
<text  x="990.75" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,990,321 us., 47.53%)</title><rect x="357.5" y="85" width="560.9" height="15.0" fill="rgb(215,151,14)" rx="2" ry="2" />
<text  x="360.47" y="95.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (225,594 us., 1.34%)</title><rect x="1082.5" y="101" width="15.8" height="15.0" fill="rgb(245,48,37)" rx="2" ry="2" />
<text  x="1085.50" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (5,139 us., 0.03%)</title><rect x="987.4" y="181" width="0.4" height="15.0" fill="rgb(230,67,24)" rx="2" ry="2" />
<text  x="990.39" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (225,594 us., 1.34%)</title><rect x="1082.5" y="149" width="15.8" height="15.0" fill="rgb(223,194,20)" rx="2" ry="2" />
<text  x="1085.50" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (361,100 us., 2.15%)</title><rect x="918.4" y="165" width="25.3" height="15.0" fill="rgb(215,19,23)" rx="2" ry="2" />
<text  x="921.36" y="175.5" >n..</text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (419,985 us., 2.50%)</title><rect x="1143.8" y="181" width="29.4" height="15.0" fill="rgb(217,195,37)" rx="2" ry="2" />
<text  x="1146.75" y="191.5" >nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,946 us., 0.03%)</title><rect x="987.8" y="85" width="0.3" height="15.0" fill="rgb(210,191,3)" rx="2" ry="2" />
<text  x="990.75" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (4,949,969 us., 29.45%)</title><rect x="10.0" y="117" width="347.5" height="15.0" fill="rgb(240,43,52)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >transformers/models/opt/modeling_opt.py(553):_f..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (487,677 us., 2.90%)</title><rect x="988.1" y="85" width="34.2" height="15.0" fill="rgb(239,140,52)" rx="2" ry="2" />
<text  x="991.10" y="95.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (4,946 us., 0.03%)</title><rect x="987.8" y="181" width="0.3" height="15.0" fill="rgb(220,190,48)" rx="2" ry="2" />
<text  x="990.75" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTAttention (487,677 us., 2.90%)</title><rect x="988.1" y="181" width="34.2" height="15.0" fill="rgb(241,97,4)" rx="2" ry="2" />
<text  x="991.10" y="191.5" >nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,946 us., 0.01%)</title><rect x="987.3" y="117" width="0.1" height="15.0" fill="rgb(237,180,16)" rx="2" ry="2" />
<text  x="990.25" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (571,614 us., 3.40%)</title><rect x="1042.0" y="117" width="40.1" height="15.0" fill="rgb(217,178,52)" rx="2" ry="2" />
<text  x="1044.97" y="127.5" >tra..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (234,515 us., 1.40%)</title><rect x="1173.2" y="181" width="16.5" height="15.0" fill="rgb(213,218,40)" rx="2" ry="2" />
<text  x="1176.23" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,922 us., 0.02%)</title><rect x="1189.7" y="165" width="0.3" height="15.0" fill="rgb(235,224,15)" rx="2" ry="2" />
<text  x="1192.72" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,946 us., 0.01%)</title><rect x="987.3" y="149" width="0.1" height="15.0" fill="rgb(252,162,19)" rx="2" ry="2" />
<text  x="990.25" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (361,100 us., 2.15%)</title><rect x="918.4" y="149" width="25.3" height="15.0" fill="rgb(252,156,13)" rx="2" ry="2" />
<text  x="921.36" y="159.5" >p..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (318,805 us., 1.90%)</title><rect x="1121.3" y="101" width="22.4" height="15.0" fill="rgb(219,133,48)" rx="2" ry="2" />
<text  x="1124.31" y="111.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(533):__prepare_decoder_attention_mask (4,024 us., 0.02%)</title><rect x="1082.1" y="213" width="0.3" height="15.0" fill="rgb(208,96,16)" rx="2" ry="2" />
<text  x="1085.09" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f993664d9c0&gt; (323,541 us., 1.92%)</title><rect x="1098.6" y="229" width="22.7" height="15.0" fill="rgb(220,34,24)" rx="2" ry="2" />
<text  x="1101.58" y="239.5" >&lt;..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (4,949,969 us., 29.45%)</title><rect x="10.0" y="149" width="347.5" height="15.0" fill="rgb(232,165,8)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >transformers/models/opt/modeling_opt.py(298):_f..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,922 us., 0.02%)</title><rect x="1189.7" y="197" width="0.3" height="15.0" fill="rgb(232,18,14)" rx="2" ry="2" />
<text  x="1192.72" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (323,541 us., 1.92%)</title><rect x="1098.6" y="213" width="22.7" height="15.0" fill="rgb(234,183,29)" rx="2" ry="2" />
<text  x="1101.58" y="223.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (419,985 us., 2.50%)</title><rect x="1143.8" y="197" width="29.4" height="15.0" fill="rgb(214,224,37)" rx="2" ry="2" />
<text  x="1146.75" y="207.5" >tr..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (318,805 us., 1.90%)</title><rect x="1121.3" y="69" width="22.4" height="15.0" fill="rgb(218,158,27)" rx="2" ry="2" />
<text  x="1124.31" y="79.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (487,677 us., 2.90%)</title><rect x="988.1" y="53" width="34.2" height="15.0" fill="rgb(233,30,44)" rx="2" ry="2" />
<text  x="991.10" y="63.5" >to..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (1,800 us., 0.01%)</title><rect x="1082.4" y="181" width="0.1" height="15.0" fill="rgb(254,85,26)" rx="2" ry="2" />
<text  x="1085.38" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (234,515 us., 1.40%)</title><rect x="1173.2" y="213" width="16.5" height="15.0" fill="rgb(215,87,27)" rx="2" ry="2" />
<text  x="1176.23" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (279,345 us., 1.66%)</title><rect x="1022.4" y="85" width="19.6" height="15.0" fill="rgb(246,139,46)" rx="2" ry="2" />
<text  x="1025.36" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (5,139 us., 0.03%)</title><rect x="987.4" y="165" width="0.4" height="15.0" fill="rgb(210,163,22)" rx="2" ry="2" />
<text  x="990.39" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (279,345 us., 1.66%)</title><rect x="1022.4" y="149" width="19.6" height="15.0" fill="rgb(250,176,22)" rx="2" ry="2" />
<text  x="1025.36" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,949,969 us., 29.45%)</title><rect x="10.0" y="69" width="347.5" height="15.0" fill="rgb(249,128,37)" rx="2" ry="2" />
<text  x="13.00" y="79.5" >nn.Module:_OPTForCausalLM</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (571,614 us., 3.40%)</title><rect x="1042.0" y="69" width="40.1" height="15.0" fill="rgb(241,119,48)" rx="2" ry="2" />
<text  x="1044.97" y="79.5" >tor..</text>
</g>
<g >
<title>&lt;built-in_method_relu_of_type_object_at_0x7f993664d9c0&gt; (318,805 us., 1.90%)</title><rect x="1121.3" y="229" width="22.4" height="15.0" fill="rgb(252,167,48)" rx="2" ry="2" />
<text  x="1124.31" y="239.5" >&lt;..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (571,614 us., 3.40%)</title><rect x="1042.0" y="181" width="40.1" height="15.0" fill="rgb(235,156,18)" rx="2" ry="2" />
<text  x="1044.97" y="191.5" >tra..</text>
</g>
<g >
<title>torch/nn/modules/activation.py(97):_forward (318,805 us., 1.90%)</title><rect x="1121.3" y="197" width="22.4" height="15.0" fill="rgb(212,25,52)" rx="2" ry="2" />
<text  x="1124.31" y="207.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (487,677 us., 2.90%)</title><rect x="988.1" y="197" width="34.2" height="15.0" fill="rgb(213,134,24)" rx="2" ry="2" />
<text  x="991.10" y="207.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (1,946 us., 0.01%)</title><rect x="987.3" y="165" width="0.1" height="15.0" fill="rgb(217,75,16)" rx="2" ry="2" />
<text  x="990.25" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,024 us., 0.02%)</title><rect x="1082.1" y="181" width="0.3" height="15.0" fill="rgb(245,199,48)" rx="2" ry="2" />
<text  x="1085.09" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (620,414 us., 3.69%)</title><rect x="943.7" y="213" width="43.6" height="15.0" fill="rgb(214,59,9)" rx="2" ry="2" />
<text  x="946.70" y="223.5" >tran..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (234,515 us., 1.40%)</title><rect x="1173.2" y="165" width="16.5" height="15.0" fill="rgb(246,28,45)" rx="2" ry="2" />
<text  x="1176.23" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (361,100 us., 2.15%)</title><rect x="918.4" y="133" width="25.3" height="15.0" fill="rgb(230,155,44)" rx="2" ry="2" />
<text  x="921.36" y="143.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (234,515 us., 1.40%)</title><rect x="1173.2" y="229" width="16.5" height="15.0" fill="rgb(244,55,15)" rx="2" ry="2" />
<text  x="1176.23" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,946 us., 0.01%)</title><rect x="987.3" y="101" width="0.1" height="15.0" fill="rgb(242,49,23)" rx="2" ry="2" />
<text  x="990.25" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (234,515 us., 1.40%)</title><rect x="1173.2" y="117" width="16.5" height="15.0" fill="rgb(217,7,30)" rx="2" ry="2" />
<text  x="1176.23" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (620,414 us., 3.69%)</title><rect x="943.7" y="117" width="43.6" height="15.0" fill="rgb(245,116,11)" rx="2" ry="2" />
<text  x="946.70" y="127.5" >tran..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (279,345 us., 1.66%)</title><rect x="1022.4" y="101" width="19.6" height="15.0" fill="rgb(234,206,44)" rx="2" ry="2" />
<text  x="1025.36" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (10,085 us., 0.06%)</title><rect x="987.4" y="213" width="0.7" height="15.0" fill="rgb(216,152,49)" rx="2" ry="2" />
<text  x="990.39" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (7,990,321 us., 47.53%)</title><rect x="357.5" y="165" width="560.9" height="15.0" fill="rgb(252,96,17)" rx="2" ry="2" />
<text  x="360.47" y="175.5" >nn.Module:_OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (225,594 us., 1.34%)</title><rect x="1082.5" y="117" width="15.8" height="15.0" fill="rgb(247,91,54)" rx="2" ry="2" />
<text  x="1085.50" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,024 us., 0.02%)</title><rect x="1082.1" y="133" width="0.3" height="15.0" fill="rgb(229,43,9)" rx="2" ry="2" />
<text  x="1085.09" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (4,946 us., 0.03%)</title><rect x="987.8" y="133" width="0.3" height="15.0" fill="rgb(231,51,23)" rx="2" ry="2" />
<text  x="990.75" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (1,946 us., 0.01%)</title><rect x="987.3" y="213" width="0.1" height="15.0" fill="rgb(207,95,36)" rx="2" ry="2" />
<text  x="990.25" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (323,541 us., 1.92%)</title><rect x="1098.6" y="181" width="22.7" height="15.0" fill="rgb(237,59,0)" rx="2" ry="2" />
<text  x="1101.58" y="191.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (3,516 us., 0.02%)</title><rect x="1098.3" y="117" width="0.3" height="15.0" fill="rgb(238,52,30)" rx="2" ry="2" />
<text  x="1101.34" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (7,990,321 us., 47.53%)</title><rect x="357.5" y="133" width="560.9" height="15.0" fill="rgb(215,158,48)" rx="2" ry="2" />
<text  x="360.47" y="143.5" >nn.Module:_OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (419,985 us., 2.50%)</title><rect x="1143.8" y="229" width="29.4" height="15.0" fill="rgb(250,31,54)" rx="2" ry="2" />
<text  x="1146.75" y="239.5" >tr..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (323,541 us., 1.92%)</title><rect x="1098.6" y="101" width="22.7" height="15.0" fill="rgb(237,197,39)" rx="2" ry="2" />
<text  x="1101.58" y="111.5" >n..</text>
</g>
<g >
<title>nn.Module:_OPTAttention (279,345 us., 1.66%)</title><rect x="1022.4" y="181" width="19.6" height="15.0" fill="rgb(231,79,21)" rx="2" ry="2" />
<text  x="1025.36" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (225,594 us., 1.34%)</title><rect x="1082.5" y="85" width="15.8" height="15.0" fill="rgb(245,31,45)" rx="2" ry="2" />
<text  x="1085.50" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (3,922 us., 0.02%)</title><rect x="1189.7" y="181" width="0.3" height="15.0" fill="rgb(215,29,54)" rx="2" ry="2" />
<text  x="1192.72" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (571,614 us., 3.40%)</title><rect x="1042.0" y="85" width="40.1" height="15.0" fill="rgb(221,153,34)" rx="2" ry="2" />
<text  x="1044.97" y="95.5" >pro..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (3,922 us., 0.02%)</title><rect x="1189.7" y="229" width="0.3" height="15.0" fill="rgb(219,156,45)" rx="2" ry="2" />
<text  x="1192.72" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (571,614 us., 3.40%)</title><rect x="1042.0" y="133" width="40.1" height="15.0" fill="rgb(230,140,16)" rx="2" ry="2" />
<text  x="1044.97" y="143.5" >nn...</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (318,805 us., 1.90%)</title><rect x="1121.3" y="85" width="22.4" height="15.0" fill="rgb(241,62,50)" rx="2" ry="2" />
<text  x="1124.31" y="95.5" >n..</text>
</g>
<g >
<title>nn.Module:_OPTAttention (620,414 us., 3.69%)</title><rect x="943.7" y="197" width="43.6" height="15.0" fill="rgb(222,112,45)" rx="2" ry="2" />
<text  x="946.70" y="207.5" >nn.M..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (7,990,321 us., 47.53%)</title><rect x="357.5" y="149" width="560.9" height="15.0" fill="rgb(211,106,30)" rx="2" ry="2" />
<text  x="360.47" y="159.5" >transformers/models/opt/modeling_opt.py(553):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,139 us., 0.03%)</title><rect x="987.4" y="133" width="0.4" height="15.0" fill="rgb(235,14,16)" rx="2" ry="2" />
<text  x="990.39" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (4,024 us., 0.02%)</title><rect x="1082.1" y="149" width="0.3" height="15.0" fill="rgb(221,117,39)" rx="2" ry="2" />
<text  x="1085.09" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f993664d9c0&gt; (10,085 us., 0.06%)</title><rect x="987.4" y="229" width="0.7" height="15.0" fill="rgb(212,10,40)" rx="2" ry="2" />
<text  x="990.39" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,949,969 us., 29.45%)</title><rect x="10.0" y="53" width="347.5" height="15.0" fill="rgb(248,31,10)" rx="2" ry="2" />
<text  x="13.00" y="63.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>all (16,810,092 us., 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(226,217,35)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (620,414 us., 3.69%)</title><rect x="943.7" y="165" width="43.6" height="15.0" fill="rgb(226,43,8)" rx="2" ry="2" />
<text  x="946.70" y="175.5" >nn.M..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (279,345 us., 1.66%)</title><rect x="1022.4" y="165" width="19.6" height="15.0" fill="rgb(213,34,54)" rx="2" ry="2" />
<text  x="1025.36" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,139 us., 0.03%)</title><rect x="987.4" y="85" width="0.4" height="15.0" fill="rgb(205,215,5)" rx="2" ry="2" />
<text  x="990.39" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,800 us., 0.01%)</title><rect x="1082.4" y="101" width="0.1" height="15.0" fill="rgb(253,51,54)" rx="2" ry="2" />
<text  x="1085.38" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (279,345 us., 1.66%)</title><rect x="1022.4" y="69" width="19.6" height="15.0" fill="rgb(251,160,25)" rx="2" ry="2" />
<text  x="1025.36" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (318,805 us., 1.90%)</title><rect x="1121.3" y="117" width="22.4" height="15.0" fill="rgb(252,189,8)" rx="2" ry="2" />
<text  x="1124.31" y="127.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,922 us., 0.02%)</title><rect x="1189.7" y="149" width="0.3" height="15.0" fill="rgb(248,77,10)" rx="2" ry="2" />
<text  x="1192.72" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (7,990,321 us., 47.53%)</title><rect x="357.5" y="181" width="560.9" height="15.0" fill="rgb(219,159,22)" rx="2" ry="2" />
<text  x="360.47" y="191.5" >transformers/models/opt/modeling_opt.py(298):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (225,594 us., 1.34%)</title><rect x="1082.5" y="165" width="15.8" height="15.0" fill="rgb(240,69,30)" rx="2" ry="2" />
<text  x="1085.50" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (13,301,390 us., 79.13%)</title><rect x="10.0" y="229" width="933.7" height="15.0" fill="rgb(243,72,37)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >&lt;built-in_function_linear&gt;</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (571,614 us., 3.40%)</title><rect x="1042.0" y="101" width="40.1" height="15.0" fill="rgb(238,131,48)" rx="2" ry="2" />
<text  x="1044.97" y="111.5" >nn...</text>
</g>
<g >
<title>nn.Module:_OPTAttention (323,541 us., 1.92%)</title><rect x="1098.6" y="197" width="22.7" height="15.0" fill="rgb(210,174,9)" rx="2" ry="2" />
<text  x="1101.58" y="207.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (225,594 us., 1.34%)</title><rect x="1082.5" y="69" width="15.8" height="15.0" fill="rgb(227,203,39)" rx="2" ry="2" />
<text  x="1085.50" y="79.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,024 us., 0.02%)</title><rect x="1082.1" y="165" width="0.3" height="15.0" fill="rgb(213,169,51)" rx="2" ry="2" />
<text  x="1085.09" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTAttention (4,949,969 us., 29.45%)</title><rect x="10.0" y="165" width="347.5" height="15.0" fill="rgb(244,36,25)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >nn.Module:_OPTAttention</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (419,985 us., 2.50%)</title><rect x="1143.8" y="117" width="29.4" height="15.0" fill="rgb(238,10,16)" rx="2" ry="2" />
<text  x="1146.75" y="127.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (419,985 us., 2.50%)</title><rect x="1143.8" y="165" width="29.4" height="15.0" fill="rgb(236,50,46)" rx="2" ry="2" />
<text  x="1146.75" y="175.5" >tr..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,946 us., 0.03%)</title><rect x="987.8" y="69" width="0.3" height="15.0" fill="rgb(215,35,44)" rx="2" ry="2" />
<text  x="990.75" y="79.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1446):_relu (318,805 us., 1.90%)</title><rect x="1121.3" y="213" width="22.4" height="15.0" fill="rgb(205,158,50)" rx="2" ry="2" />
<text  x="1124.31" y="223.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(533):__prepare_decoder_attention_mask (1,800 us., 0.01%)</title><rect x="1082.4" y="197" width="0.1" height="15.0" fill="rgb(252,161,50)" rx="2" ry="2" />
<text  x="1085.38" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,800 us., 0.01%)</title><rect x="1082.4" y="117" width="0.1" height="15.0" fill="rgb(240,95,47)" rx="2" ry="2" />
<text  x="1085.38" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (234,515 us., 1.40%)</title><rect x="1173.2" y="197" width="16.5" height="15.0" fill="rgb(254,228,18)" rx="2" ry="2" />
<text  x="1176.23" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(298):_forward (620,414 us., 3.69%)</title><rect x="943.7" y="181" width="43.6" height="15.0" fill="rgb(217,140,11)" rx="2" ry="2" />
<text  x="946.70" y="191.5" >tran..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (487,677 us., 2.90%)</title><rect x="988.1" y="69" width="34.2" height="15.0" fill="rgb(218,85,5)" rx="2" ry="2" />
<text  x="991.10" y="79.5" >pr..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (318,805 us., 1.90%)</title><rect x="1121.3" y="53" width="22.4" height="15.0" fill="rgb(216,113,41)" rx="2" ry="2" />
<text  x="1124.31" y="63.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (5,139 us., 0.03%)</title><rect x="987.4" y="117" width="0.4" height="15.0" fill="rgb(217,18,38)" rx="2" ry="2" />
<text  x="990.39" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_bmm_of_type_object_at_0x7f993664d9c0&gt; (620,414 us., 3.69%)</title><rect x="943.7" y="229" width="43.6" height="15.0" fill="rgb(214,85,44)" rx="2" ry="2" />
<text  x="946.70" y="239.5" >&lt;bui..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (323,541 us., 1.92%)</title><rect x="1098.6" y="117" width="22.7" height="15.0" fill="rgb(243,19,10)" rx="2" ry="2" />
<text  x="1101.58" y="127.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (1,800 us., 0.01%)</title><rect x="1082.4" y="165" width="0.1" height="15.0" fill="rgb(245,103,49)" rx="2" ry="2" />
<text  x="1085.38" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,024 us., 0.02%)</title><rect x="1082.1" y="117" width="0.3" height="15.0" fill="rgb(234,168,20)" rx="2" ry="2" />
<text  x="1085.09" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f993664d9c0&gt; (229,110 us., 1.36%)</title><rect x="1082.5" y="229" width="16.1" height="15.0" fill="rgb(211,81,0)" rx="2" ry="2" />
<text  x="1085.50" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(553):_forward (571,614 us., 3.40%)</title><rect x="1042.0" y="149" width="40.1" height="15.0" fill="rgb(237,160,32)" rx="2" ry="2" />
<text  x="1044.97" y="159.5" >tra..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (361,100 us., 2.15%)</title><rect x="918.4" y="181" width="25.3" height="15.0" fill="rgb(247,122,29)" rx="2" ry="2" />
<text  x="921.36" y="191.5" >t..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (10,085 us., 0.06%)</title><rect x="987.4" y="197" width="0.7" height="15.0" fill="rgb(226,218,51)" rx="2" ry="2" />
<text  x="990.39" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (4,946 us., 0.03%)</title><rect x="987.8" y="165" width="0.3" height="15.0" fill="rgb(221,134,43)" rx="2" ry="2" />
<text  x="990.75" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,516 us., 0.02%)</title><rect x="1098.3" y="101" width="0.3" height="15.0" fill="rgb(227,125,8)" rx="2" ry="2" />
<text  x="1101.34" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,139 us., 0.03%)</title><rect x="987.4" y="101" width="0.4" height="15.0" fill="rgb(251,71,46)" rx="2" ry="2" />
<text  x="990.39" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoderLayer (571,614 us., 3.40%)</title><rect x="1042.0" y="165" width="40.1" height="15.0" fill="rgb(222,72,11)" rx="2" ry="2" />
<text  x="1044.97" y="175.5" >nn...</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (487,677 us., 2.90%)</title><rect x="988.1" y="213" width="34.2" height="15.0" fill="rgb(254,149,47)" rx="2" ry="2" />
<text  x="991.10" y="223.5" >to..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (279,345 us., 1.66%)</title><rect x="1022.4" y="197" width="19.6" height="15.0" fill="rgb(232,48,6)" rx="2" ry="2" />
<text  x="1025.36" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (323,541 us., 1.92%)</title><rect x="1098.6" y="69" width="22.7" height="15.0" fill="rgb(208,213,49)" rx="2" ry="2" />
<text  x="1101.58" y="79.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,949,969 us., 29.45%)</title><rect x="10.0" y="85" width="347.5" height="15.0" fill="rgb(209,56,7)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >transformers/models/opt/modeling_opt.py(840):_f..</text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (229,110 us., 1.36%)</title><rect x="1082.5" y="213" width="16.1" height="15.0" fill="rgb(248,53,6)" rx="2" ry="2" />
<text  x="1085.50" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTForCausalLM (1,800 us., 0.01%)</title><rect x="1082.4" y="133" width="0.1" height="15.0" fill="rgb(224,99,8)" rx="2" ry="2" />
<text  x="1085.38" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(160):_forward (4,949,969 us., 29.45%)</title><rect x="10.0" y="181" width="347.5" height="15.0" fill="rgb(207,60,28)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >transformers/models/opt/modeling_opt.py(160):_f..</text>
</g>
<g >
<title>nn.Module:_OPTDecoder (487,677 us., 2.90%)</title><rect x="988.1" y="117" width="34.2" height="15.0" fill="rgb(240,210,9)" rx="2" ry="2" />
<text  x="991.10" y="127.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (279,345 us., 1.66%)</title><rect x="1022.4" y="53" width="19.6" height="15.0" fill="rgb(237,216,19)" rx="2" ry="2" />
<text  x="1025.36" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (225,594 us., 1.34%)</title><rect x="1082.5" y="53" width="15.8" height="15.0" fill="rgb(219,111,28)" rx="2" ry="2" />
<text  x="1085.50" y="63.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,800 us., 0.01%)</title><rect x="1082.4" y="149" width="0.1" height="15.0" fill="rgb(254,59,48)" rx="2" ry="2" />
<text  x="1085.38" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (323,541 us., 1.92%)</title><rect x="1098.6" y="85" width="22.7" height="15.0" fill="rgb(205,87,6)" rx="2" ry="2" />
<text  x="1101.58" y="95.5" >p..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (234,515 us., 1.40%)</title><rect x="1173.2" y="133" width="16.5" height="15.0" fill="rgb(219,16,49)" rx="2" ry="2" />
<text  x="1176.23" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTDecoder (3,516 us., 0.02%)</title><rect x="1098.3" y="149" width="0.3" height="15.0" fill="rgb(249,33,11)" rx="2" ry="2" />
<text  x="1101.34" y="159.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (13,301,390 us., 79.13%)</title><rect x="10.0" y="213" width="933.7" height="15.0" fill="rgb(249,87,35)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >torch/nn/modules/linear.py(113):_forward</text>
</g>
</g>
</svg>
